
PWM_Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001942  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00001942  000019d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000aa  008000aa  00001a20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ca0  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e13  00000000  00000000  00004944  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001507  00000000  00000000  00005757  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  00006c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eee  00000000  00000000  000071d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e63  00000000  00000000  000080be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009f21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	e1 02       	muls	r30, r17
      56:	64 03       	mulsu	r22, r20
      58:	64 03       	mulsu	r22, r20
      5a:	64 03       	mulsu	r22, r20
      5c:	64 03       	mulsu	r22, r20
      5e:	c0 02       	muls	r28, r16
      60:	64 03       	mulsu	r22, r20
      62:	64 03       	mulsu	r22, r20
      64:	64 03       	mulsu	r22, r20
      66:	64 03       	mulsu	r22, r20
      68:	64 03       	mulsu	r22, r20
      6a:	64 03       	mulsu	r22, r20
      6c:	64 03       	mulsu	r22, r20
      6e:	ec 02       	muls	r30, r28
      70:	d6 02       	muls	r29, r22
      72:	64 03       	mulsu	r22, r20
      74:	f7 02       	muls	r31, r23
      76:	02 03       	mulsu	r16, r18
      78:	0d 03       	fmul	r16, r21
      7a:	18 03       	fmul	r17, r16
      7c:	23 03       	mulsu	r18, r19
      7e:	2e 03       	fmul	r18, r22
      80:	39 03       	fmul	r19, r17
      82:	44 03       	mulsu	r20, r20
      84:	4f 03       	fmul	r20, r23
      86:	5a 03       	fmul	r21, r18
      88:	64 03       	mulsu	r22, r20
      8a:	64 03       	mulsu	r22, r20
      8c:	64 03       	mulsu	r22, r20
      8e:	cb 02       	muls	r28, r27
      90:	64 03       	mulsu	r22, r20
      92:	64 03       	mulsu	r22, r20
      94:	64 03       	mulsu	r22, r20
      96:	05 02       	muls	r16, r21
      98:	64 03       	mulsu	r22, r20
      9a:	52 02       	muls	r21, r18
      9c:	68 02       	muls	r22, r24
      9e:	26 02       	muls	r18, r22
      a0:	10 02       	muls	r17, r16
      a2:	64 03       	mulsu	r22, r20
      a4:	89 02       	muls	r24, r25
      a6:	b5 02       	muls	r27, r21
      a8:	64 03       	mulsu	r22, r20
      aa:	7e 02       	muls	r23, r30
      ac:	64 03       	mulsu	r22, r20
      ae:	9f 02       	muls	r25, r31
      b0:	47 02       	muls	r20, r23
      b2:	64 03       	mulsu	r22, r20
      b4:	64 03       	mulsu	r22, r20
      b6:	31 02       	muls	r19, r17
      b8:	1b 02       	muls	r17, r27
      ba:	aa 02       	muls	r26, r26
      bc:	73 02       	muls	r23, r19
      be:	3c 02       	muls	r19, r28
      c0:	64 03       	mulsu	r22, r20
      c2:	64 03       	mulsu	r22, r20
      c4:	64 03       	mulsu	r22, r20
      c6:	5d 02       	muls	r21, r29
      c8:	94 02       	muls	r25, r20
      ca:	64 03       	mulsu	r22, r20
      cc:	64 03       	mulsu	r22, r20
      ce:	64 03       	mulsu	r22, r20
      d0:	64 03       	mulsu	r22, r20
      d2:	64 03       	mulsu	r22, r20
      d4:	64 03       	mulsu	r22, r20
      d6:	05 02       	muls	r16, r21
      d8:	64 03       	mulsu	r22, r20
      da:	52 02       	muls	r21, r18
      dc:	68 02       	muls	r22, r24
      de:	26 02       	muls	r18, r22
      e0:	10 02       	muls	r17, r16
      e2:	64 03       	mulsu	r22, r20
      e4:	89 02       	muls	r24, r25
      e6:	b5 02       	muls	r27, r21
      e8:	64 03       	mulsu	r22, r20
      ea:	7e 02       	muls	r23, r30
      ec:	64 03       	mulsu	r22, r20
      ee:	9f 02       	muls	r25, r31
      f0:	47 02       	muls	r20, r23
      f2:	64 03       	mulsu	r22, r20
      f4:	64 03       	mulsu	r22, r20
      f6:	31 02       	muls	r19, r17
      f8:	1b 02       	muls	r17, r27
      fa:	aa 02       	muls	r26, r26
      fc:	73 02       	muls	r23, r19
      fe:	3c 02       	muls	r19, r28
     100:	64 03       	mulsu	r22, r20
     102:	64 03       	mulsu	r22, r20
     104:	64 03       	mulsu	r22, r20
     106:	5d 02       	muls	r21, r29
     108:	94 02       	muls	r25, r20

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf e5       	ldi	r28, 0x5F	; 95
     110:	d8 e0       	ldi	r29, 0x08	; 8
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	10 e0       	ldi	r17, 0x00	; 0
     118:	a0 e6       	ldi	r26, 0x60	; 96
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e2 e4       	ldi	r30, 0x42	; 66
     11e:	f9 e1       	ldi	r31, 0x19	; 25
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
     122:	05 90       	lpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	aa 3a       	cpi	r26, 0xAA	; 170
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	aa ea       	ldi	r26, 0xAA	; 170
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	af 3a       	cpi	r26, 0xAF	; 175
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	0e 94 a4 00 	call	0x148	; 0x148 <main>
     140:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <_exit>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <main>:
#include "PWM_Drawerh.h"

#include <util/delay.h>

int main(void)
{
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	61 97       	sbiw	r28, 0x11	; 17
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	f8 94       	cli
     156:	de bf       	out	0x3e, r29	; 62
     158:	0f be       	out	0x3f, r0	; 63
     15a:	cd bf       	out	0x3d, r28	; 61
	PWMDrawer_Init();
     15c:	0e 94 fc 07 	call	0xff8	; 0xff8 <PWMDrawer_Init>
	PWMDrawer_SignalAttributesType Signal_Data = {0, 0, 0, 0, 0};
     160:	fe 01       	movw	r30, r28
     162:	31 96       	adiw	r30, 0x01	; 1
     164:	81 e1       	ldi	r24, 0x11	; 17
     166:	df 01       	movw	r26, r30
     168:	1d 92       	st	X+, r1
     16a:	8a 95       	dec	r24
     16c:	e9 f7       	brne	.-6      	; 0x168 <main+0x20>
	fint32_t Scale_ms = 0;
	while(1)
	{
		//app
		PWMDrawer_MeasureSignal(&Signal_Data);
     16e:	ce 01       	movw	r24, r28
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	0e 94 09 08 	call	0x1012	; 0x1012 <PWMDrawer_MeasureSignal>
		Scale_ms = (Signal_Data.Period_Time_ms) / 4;
		PWMDrawer_DrawSignal(&Signal_Data, Scale_ms);
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	40 e8       	ldi	r20, 0x80	; 128
     17c:	5e e3       	ldi	r21, 0x3E	; 62
     17e:	6a 85       	ldd	r22, Y+10	; 0x0a
     180:	7b 85       	ldd	r23, Y+11	; 0x0b
     182:	8c 85       	ldd	r24, Y+12	; 0x0c
     184:	9d 85       	ldd	r25, Y+13	; 0x0d
     186:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     18a:	ab 01       	movw	r20, r22
     18c:	bc 01       	movw	r22, r24
     18e:	ce 01       	movw	r24, r28
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <PWMDrawer_DrawSignal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     196:	bf ef       	ldi	r27, 0xFF	; 255
     198:	21 ee       	ldi	r18, 0xE1	; 225
     19a:	84 e0       	ldi	r24, 0x04	; 4
     19c:	b1 50       	subi	r27, 0x01	; 1
     19e:	20 40       	sbci	r18, 0x00	; 0
     1a0:	80 40       	sbci	r24, 0x00	; 0
     1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x54>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x5e>
     1a6:	00 00       	nop
     1a8:	e2 cf       	rjmp	.-60     	; 0x16e <main+0x26>

000001aa <GLCD_SelectPage>:
	GLCD_SelectPage(GLCD_PAGE_0);
	gu8_Curr_Page = 0;
}

void GLCD_SelectPage(GLCD_PageSelectType Page) {
	switch (Page) {
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	89 f0       	breq	.+34     	; 0x1d0 <GLCD_SelectPage+0x26>
     1ae:	28 f0       	brcs	.+10     	; 0x1ba <GLCD_SelectPage+0x10>
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	c9 f0       	breq	.+50     	; 0x1e6 <GLCD_SelectPage+0x3c>
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	11 f1       	breq	.+68     	; 0x1fc <GLCD_SelectPage+0x52>
     1b8:	08 95       	ret
		case GLCD_NO_PAGES:
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
     1ba:	40 e0       	ldi	r20, 0x00	; 0
     1bc:	64 e0       	ldi	r22, 0x04	; 4
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	65 e0       	ldi	r22, 0x05	; 5
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
		break;
     1ce:	08 95       	ret
		case GLCD_PAGE_0:
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
     1d0:	41 e0       	ldi	r20, 0x01	; 1
     1d2:	64 e0       	ldi	r22, 0x04	; 4
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	65 e0       	ldi	r22, 0x05	; 5
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
		break;
     1e4:	08 95       	ret
		case GLCD_PAGE_1:
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	64 e0       	ldi	r22, 0x04	; 4
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
     1f0:	41 e0       	ldi	r20, 0x01	; 1
     1f2:	65 e0       	ldi	r22, 0x05	; 5
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
		break;
     1fa:	08 95       	ret
		case GLCD_BOTH_PAGES:
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
     1fc:	41 e0       	ldi	r20, 0x01	; 1
     1fe:	64 e0       	ldi	r22, 0x04	; 4
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
     206:	41 e0       	ldi	r20, 0x01	; 1
     208:	65 e0       	ldi	r22, 0x05	; 5
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
     210:	08 95       	ret

00000212 <GLCD_SendInstruction>:
		break;
		default: break;
	}
}

void GLCD_SendInstruction(GLCD_CommandType Instruction) {
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
	/* Select Instruction Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_INSTRUCTION_REG);
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	62 e0       	ldi	r22, 0x02	; 2
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Instruction);
     22a:	6c 2f       	mov	r22, r28
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 29 05 	call	0xa52	; 0xa52 <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
     232:	41 e0       	ldi	r20, 0x01	; 1
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23c:	8a e1       	ldi	r24, 0x1A	; 26
     23e:	8a 95       	dec	r24
     240:	f1 f7       	brne	.-4      	; 0x23e <GLCD_SendInstruction+0x2c>
     242:	00 c0       	rjmp	.+0      	; 0x244 <GLCD_SendInstruction+0x32>
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
	_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
}
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <GLCD_Init>:
void GLCD_Init(void) {
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	GPT_Init(gaStrGPT_Config);
	#endif
	/* Initialize Port Directions */
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_OUTPUT);
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RS_PIN, DIO_OUTPUT);
     25c:	41 e0       	ldi	r20, 0x01	; 1
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RW_PIN, DIO_OUTPUT);
     266:	41 e0       	ldi	r20, 0x01	; 1
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_OUTPUT);
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	66 e0       	ldi	r22, 0x06	; 6
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_OUTPUT);
     27a:	41 e0       	ldi	r20, 0x01	; 1
     27c:	64 e0       	ldi	r22, 0x04	; 4
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_OUTPUT);
     284:	41 e0       	ldi	r20, 0x01	; 1
     286:	65 e0       	ldi	r22, 0x05	; 5
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_SetPinDirection>

	DIO_SetPortDirection(GLCD_DATA_PORT, DIO_OUTPUT);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 17 05 	call	0xa2e	; 0xa2e <DIO_SetPortDirection>
	/* Keep reset pin inactive (high) */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	66 e0       	ldi	r22, 0x06	; 6
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
	/* Initialization of GLCD Sequence */
	GLCD_SelectPage(GLCD_BOTH_PAGES);
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <GLCD_SelectPage>
	GLCD_SendInstruction(GLCD_DISPLAY_OFF);
     2a6:	8e e3       	ldi	r24, 0x3E	; 62
     2a8:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + 0);  /* line=0 */
     2ac:	88 eb       	ldi	r24, 0xB8	; 184
     2ae:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
	gu8_Curr_X_Address = 0;
     2b2:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <gu8_Curr_X_Address>
	GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + 0);  /* column=0 */
     2b6:	80 e4       	ldi	r24, 0x40	; 64
     2b8:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
	gu8_Curr_Y_Address = 0;
     2bc:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu8_Curr_Y_Address>
	GLCD_SendInstruction(GLCD_SET_Z_ADDRESS_PREFIX + 0);  /* start_line=0 */
     2c0:	80 ec       	ldi	r24, 0xC0	; 192
     2c2:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_DISPLAY_ON);
     2c6:	8f e3       	ldi	r24, 0x3F	; 63
     2c8:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
	GLCD_SelectPage(GLCD_PAGE_0);
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0e 94 d5 00 	call	0x1aa	; 0x1aa <GLCD_SelectPage>
	gu8_Curr_Page = 0;
     2d2:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
     2d6:	08 95       	ret

000002d8 <GLCD_SendData>:
	_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
}

void GLCD_SendData(uint8_t Data) {
     2d8:	cf 93       	push	r28
     2da:	c8 2f       	mov	r28, r24
	/* Select Data Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_DATA_REG);
     2dc:	41 e0       	ldi	r20, 0x01	; 1
     2de:	62 e0       	ldi	r22, 0x02	; 2
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Data);
     2f0:	6c 2f       	mov	r22, r28
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 29 05 	call	0xa52	; 0xa52 <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
     2f8:	41 e0       	ldi	r20, 0x01	; 1
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
     302:	8a e1       	ldi	r24, 0x1A	; 26
     304:	8a 95       	dec	r24
     306:	f1 f7       	brne	.-4      	; 0x304 <GLCD_SendData+0x2c>
     308:	00 c0       	rjmp	.+0      	; 0x30a <GLCD_SendData+0x32>
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
	_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
}
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <GLCD_Reset>:

void GLCD_Reset(void) {
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_LOW);
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	66 e0       	ldi	r22, 0x06	; 6
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
     322:	85 e3       	ldi	r24, 0x35	; 53
     324:	8a 95       	dec	r24
     326:	f1 f7       	brne	.-4      	; 0x324 <GLCD_Reset+0xc>
     328:	00 00       	nop
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	GPT_Delay_us(&gaStrGPT_Config[0], 10);
	#else
	_delay_us(10);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
     32a:	41 e0       	ldi	r20, 0x01	; 1
     32c:	66 e0       	ldi	r22, 0x06	; 6
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_WritePin>
     334:	08 95       	ret

00000336 <GLCD_DisplaySpecialPattern>:
}

void GLCD_DisplaySpecialPattern(uint64_t Pattern) {
     336:	9f 92       	push	r9
     338:	af 92       	push	r10
     33a:	bf 92       	push	r11
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	92 2e       	mov	r9, r18
     34e:	a3 2e       	mov	r10, r19
     350:	b4 2e       	mov	r11, r20
     352:	c5 2e       	mov	r12, r21
     354:	d6 2e       	mov	r13, r22
     356:	e7 2e       	mov	r14, r23
     358:	f8 2e       	mov	r15, r24
     35a:	19 2f       	mov	r17, r25
     35c:	c0 e0       	ldi	r28, 0x00	; 0
     35e:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < 5; i++) {
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
     360:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <gu8_Curr_X_Address>
     364:	88 54       	subi	r24, 0x48	; 72
     366:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
     36a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     36e:	80 5c       	subi	r24, 0xC0	; 192
     370:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
     374:	29 2d       	mov	r18, r9
     376:	3a 2d       	mov	r19, r10
     378:	4b 2d       	mov	r20, r11
     37a:	5c 2d       	mov	r21, r12
     37c:	6d 2d       	mov	r22, r13
     37e:	7e 2d       	mov	r23, r14
     380:	8f 2d       	mov	r24, r15
     382:	91 2f       	mov	r25, r17
     384:	0c 2f       	mov	r16, r28
     386:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__lshrdi3>
     38a:	82 2f       	mov	r24, r18
     38c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <GLCD_SendData>
		gu8_Curr_Y_Address++;
     390:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     394:	8f 5f       	subi	r24, 0xFF	; 255
     396:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <gu8_Curr_Y_Address>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
     39a:	80 34       	cpi	r24, 0x40	; 64
     39c:	48 f0       	brcs	.+18     	; 0x3b0 <GLCD_DisplaySpecialPattern+0x7a>
     39e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     3a2:	81 11       	cpse	r24, r1
     3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <GLCD_DisplaySpecialPattern+0x7a>
			GLCD_SelectPage(GLCD_PAGE_1);
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
     3ac:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu8_Curr_Y_Address>
     3b0:	28 96       	adiw	r28, 0x08	; 8
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
}

void GLCD_DisplaySpecialPattern(uint64_t Pattern) {
	for(uint8_t i = 0; i < 5; i++) {
     3b2:	c8 32       	cpi	r28, 0x28	; 40
     3b4:	d1 05       	cpc	r29, r1
     3b6:	a1 f6       	brne	.-88     	; 0x360 <GLCD_DisplaySpecialPattern+0x2a>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
			GLCD_SelectPage(GLCD_PAGE_1);
			gu8_Curr_Y_Address = 0;
		}
	}
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	bf 90       	pop	r11
     3ca:	af 90       	pop	r10
     3cc:	9f 90       	pop	r9
     3ce:	08 95       	ret

000003d0 <GLCD_DisplayCharacter>:

void GLCD_DisplayCharacter(char Data) {
     3d0:	e8 2f       	mov	r30, r24
	if ((gu8_Curr_Page == 0) | (gu8_Curr_Y_Address < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__data_end>
     3d8:	91 11       	cpse	r25, r1
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	81 11       	cpse	r24, r1
     3de:	09 c0       	rjmp	.+18     	; 0x3f2 <GLCD_DisplayCharacter+0x22>
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     3e6:	99 33       	cpi	r25, 0x39	; 57
     3e8:	08 f0       	brcs	.+2      	; 0x3ec <GLCD_DisplayCharacter+0x1c>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	88 23       	and	r24, r24
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <GLCD_DisplayCharacter+0x22>
     3f0:	88 c1       	rjmp	.+784    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
		/* Enough space to write character */
		switch (Data) {
     3f2:	8e 2f       	mov	r24, r30
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fc 01       	movw	r30, r24
     3f8:	b0 97       	sbiw	r30, 0x20	; 32
     3fa:	eb 35       	cpi	r30, 0x5B	; 91
     3fc:	f1 05       	cpc	r31, r1
     3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	63 c1       	rjmp	.+710    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
     402:	e6 5d       	subi	r30, 0xD6	; 214
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__tablejump2__>
			case 'A': case 'a': GLCD_DisplaySpecialPattern(GLCD_CHAR_A); break;
     40a:	2c e7       	ldi	r18, 0x7C	; 124
     40c:	32 e1       	ldi	r19, 0x12	; 18
     40e:	41 e1       	ldi	r20, 0x11	; 17
     410:	52 e1       	ldi	r21, 0x12	; 18
     412:	6c e7       	ldi	r22, 0x7C	; 124
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     41e:	54 c1       	rjmp	.+680    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'F': case 'f': GLCD_DisplaySpecialPattern(GLCD_CHAR_F); break;
     420:	2f e7       	ldi	r18, 0x7F	; 127
     422:	39 e0       	ldi	r19, 0x09	; 9
     424:	49 e0       	ldi	r20, 0x09	; 9
     426:	59 e0       	ldi	r21, 0x09	; 9
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     434:	49 c1       	rjmp	.+658    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'R': case 'r': GLCD_DisplaySpecialPattern(GLCD_CHAR_R); break;
     436:	2f e7       	ldi	r18, 0x7F	; 127
     438:	39 e0       	ldi	r19, 0x09	; 9
     43a:	49 e1       	ldi	r20, 0x19	; 25
     43c:	59 e2       	ldi	r21, 0x29	; 41
     43e:	6f e4       	ldi	r22, 0x4F	; 79
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     44a:	3e c1       	rjmp	.+636    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'E': case 'e': GLCD_DisplaySpecialPattern(GLCD_CHAR_E); break;
     44c:	2f e7       	ldi	r18, 0x7F	; 127
     44e:	39 e4       	ldi	r19, 0x49	; 73
     450:	49 e4       	ldi	r20, 0x49	; 73
     452:	59 e4       	ldi	r21, 0x49	; 73
     454:	61 e4       	ldi	r22, 0x41	; 65
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     460:	33 c1       	rjmp	.+614    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'Q': case 'q': GLCD_DisplaySpecialPattern(GLCD_CHAR_Q); break;
     462:	2e e1       	ldi	r18, 0x1E	; 30
     464:	31 e2       	ldi	r19, 0x21	; 33
     466:	41 e3       	ldi	r20, 0x31	; 49
     468:	5e e3       	ldi	r21, 0x3E	; 62
     46a:	60 e4       	ldi	r22, 0x40	; 64
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     476:	28 c1       	rjmp	.+592    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'U': case 'u': GLCD_DisplaySpecialPattern(GLCD_CHAR_U); break;
     478:	2f e3       	ldi	r18, 0x3F	; 63
     47a:	30 e4       	ldi	r19, 0x40	; 64
     47c:	40 e4       	ldi	r20, 0x40	; 64
     47e:	50 e4       	ldi	r21, 0x40	; 64
     480:	6f e3       	ldi	r22, 0x3F	; 63
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     48c:	1d c1       	rjmp	.+570    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'N': case 'n': GLCD_DisplaySpecialPattern(GLCD_CHAR_N); break;
     48e:	2f e7       	ldi	r18, 0x7F	; 127
     490:	32 e0       	ldi	r19, 0x02	; 2
     492:	4c e1       	ldi	r20, 0x1C	; 28
     494:	50 e2       	ldi	r21, 0x20	; 32
     496:	6f e7       	ldi	r22, 0x7F	; 127
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     4a2:	12 c1       	rjmp	.+548    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'C': case 'c': GLCD_DisplaySpecialPattern(GLCD_CHAR_C); break;
     4a4:	2e e3       	ldi	r18, 0x3E	; 62
     4a6:	31 e4       	ldi	r19, 0x41	; 65
     4a8:	41 e4       	ldi	r20, 0x41	; 65
     4aa:	51 e4       	ldi	r21, 0x41	; 65
     4ac:	61 e4       	ldi	r22, 0x41	; 65
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     4b8:	07 c1       	rjmp	.+526    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'Y': case 'y': GLCD_DisplaySpecialPattern(GLCD_CHAR_Y); break;
     4ba:	23 e0       	ldi	r18, 0x03	; 3
     4bc:	3c e0       	ldi	r19, 0x0C	; 12
     4be:	40 e7       	ldi	r20, 0x70	; 112
     4c0:	5c e0       	ldi	r21, 0x0C	; 12
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     4ce:	fc c0       	rjmp	.+504    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'D': case 'd': GLCD_DisplaySpecialPattern(GLCD_CHAR_D); break;
     4d0:	2f e7       	ldi	r18, 0x7F	; 127
     4d2:	31 e4       	ldi	r19, 0x41	; 65
     4d4:	41 e4       	ldi	r20, 0x41	; 65
     4d6:	5e e3       	ldi	r21, 0x3E	; 62
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     4e4:	f1 c0       	rjmp	.+482    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'T': case 't': GLCD_DisplaySpecialPattern(GLCD_CHAR_T); break;
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	31 e0       	ldi	r19, 0x01	; 1
     4ea:	4f e7       	ldi	r20, 0x7F	; 127
     4ec:	51 e0       	ldi	r21, 0x01	; 1
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     4fa:	e6 c0       	rjmp	.+460    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'K': case 'k': GLCD_DisplaySpecialPattern(GLCD_CHAR_K); break;
     4fc:	2f e7       	ldi	r18, 0x7F	; 127
     4fe:	38 e0       	ldi	r19, 0x08	; 8
     500:	44 e1       	ldi	r20, 0x14	; 20
     502:	52 e2       	ldi	r21, 0x22	; 34
     504:	61 e4       	ldi	r22, 0x41	; 65
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     510:	db c0       	rjmp	.+438    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'H': case 'h': GLCD_DisplaySpecialPattern(GLCD_CHAR_H); break;
     512:	2f e7       	ldi	r18, 0x7F	; 127
     514:	38 e0       	ldi	r19, 0x08	; 8
     516:	48 e0       	ldi	r20, 0x08	; 8
     518:	58 e0       	ldi	r21, 0x08	; 8
     51a:	6f e7       	ldi	r22, 0x7F	; 127
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     526:	d0 c0       	rjmp	.+416    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'Z': case 'z': GLCD_DisplaySpecialPattern(GLCD_CHAR_Z); break;
     528:	21 e6       	ldi	r18, 0x61	; 97
     52a:	31 e5       	ldi	r19, 0x51	; 81
     52c:	49 e4       	ldi	r20, 0x49	; 73
     52e:	55 e4       	ldi	r21, 0x45	; 69
     530:	63 e4       	ldi	r22, 0x43	; 67
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     53c:	c5 c0       	rjmp	.+394    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'M': case 'm': GLCD_DisplaySpecialPattern(GLCD_CHAR_M); break;
     53e:	2f e7       	ldi	r18, 0x7F	; 127
     540:	32 e0       	ldi	r19, 0x02	; 2
     542:	4c e0       	ldi	r20, 0x0C	; 12
     544:	52 e0       	ldi	r21, 0x02	; 2
     546:	6f e7       	ldi	r22, 0x7F	; 127
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     552:	ba c0       	rjmp	.+372    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'S': case 's': GLCD_DisplaySpecialPattern(GLCD_CHAR_S); break;
     554:	2f e4       	ldi	r18, 0x4F	; 79
     556:	39 e4       	ldi	r19, 0x49	; 73
     558:	49 e4       	ldi	r20, 0x49	; 73
     55a:	59 e4       	ldi	r21, 0x49	; 73
     55c:	69 ef       	ldi	r22, 0xF9	; 249
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     568:	af c0       	rjmp	.+350    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case 'I': case 'i': GLCD_DisplaySpecialPattern(GLCD_CHAR_I); break;
     56a:	21 e4       	ldi	r18, 0x41	; 65
     56c:	31 e4       	ldi	r19, 0x41	; 65
     56e:	4f e7       	ldi	r20, 0x7F	; 127
     570:	51 e4       	ldi	r21, 0x41	; 65
     572:	61 e4       	ldi	r22, 0x41	; 65
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     57e:	a4 c0       	rjmp	.+328    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '%': GLCD_DisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
     580:	23 ec       	ldi	r18, 0xC3	; 195
     582:	33 e7       	ldi	r19, 0x73	; 115
     584:	48 e1       	ldi	r20, 0x18	; 24
     586:	5e ec       	ldi	r21, 0xCE	; 206
     588:	63 ec       	ldi	r22, 0xC3	; 195
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     594:	99 c0       	rjmp	.+306    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '=': GLCD_DisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
     596:	24 e2       	ldi	r18, 0x24	; 36
     598:	34 e2       	ldi	r19, 0x24	; 36
     59a:	44 e2       	ldi	r20, 0x24	; 36
     59c:	54 e2       	ldi	r21, 0x24	; 36
     59e:	64 e2       	ldi	r22, 0x24	; 36
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     5aa:	8e c0       	rjmp	.+284    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '.': GLCD_DisplaySpecialPattern(GLCD_CHAR_POINT); break;
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e7       	ldi	r19, 0x70	; 112
     5b0:	40 e7       	ldi	r20, 0x70	; 112
     5b2:	50 e7       	ldi	r21, 0x70	; 112
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     5c0:	83 c0       	rjmp	.+262    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case ' ': GLCD_DisplaySpecialPattern(GLCD_CHAR_SPACE); break;
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     5d6:	78 c0       	rjmp	.+240    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '-': GLCD_DisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
     5d8:	28 e1       	ldi	r18, 0x18	; 24
     5da:	38 e1       	ldi	r19, 0x18	; 24
     5dc:	48 e1       	ldi	r20, 0x18	; 24
     5de:	58 e1       	ldi	r21, 0x18	; 24
     5e0:	68 e1       	ldi	r22, 0x18	; 24
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     5ec:	6d c0       	rjmp	.+218    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '0': GLCD_DisplaySpecialPattern(GLCD_CHAR_0); break;
     5ee:	2e e3       	ldi	r18, 0x3E	; 62
     5f0:	31 e5       	ldi	r19, 0x51	; 81
     5f2:	49 e4       	ldi	r20, 0x49	; 73
     5f4:	55 e4       	ldi	r21, 0x45	; 69
     5f6:	6e e3       	ldi	r22, 0x3E	; 62
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     602:	62 c0       	rjmp	.+196    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '1': GLCD_DisplaySpecialPattern(GLCD_CHAR_1); break;
     604:	24 e4       	ldi	r18, 0x44	; 68
     606:	32 e4       	ldi	r19, 0x42	; 66
     608:	4f e7       	ldi	r20, 0x7F	; 127
     60a:	50 e4       	ldi	r21, 0x40	; 64
     60c:	60 e4       	ldi	r22, 0x40	; 64
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     618:	57 c0       	rjmp	.+174    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '2': GLCD_DisplaySpecialPattern(GLCD_CHAR_2); break;
     61a:	26 e4       	ldi	r18, 0x46	; 70
     61c:	31 e6       	ldi	r19, 0x61	; 97
     61e:	41 e5       	ldi	r20, 0x51	; 81
     620:	5e e4       	ldi	r21, 0x4E	; 78
     622:	60 e4       	ldi	r22, 0x40	; 64
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     62e:	4c c0       	rjmp	.+152    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '3': GLCD_DisplaySpecialPattern(GLCD_CHAR_3); break;
     630:	21 e4       	ldi	r18, 0x41	; 65
     632:	39 e4       	ldi	r19, 0x49	; 73
     634:	49 e4       	ldi	r20, 0x49	; 73
     636:	59 e4       	ldi	r21, 0x49	; 73
     638:	66 e3       	ldi	r22, 0x36	; 54
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     644:	41 c0       	rjmp	.+130    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '4': GLCD_DisplaySpecialPattern(GLCD_CHAR_4); break;
     646:	28 e1       	ldi	r18, 0x18	; 24
     648:	34 e1       	ldi	r19, 0x14	; 20
     64a:	42 e1       	ldi	r20, 0x12	; 18
     64c:	5f e7       	ldi	r21, 0x7F	; 127
     64e:	60 e1       	ldi	r22, 0x10	; 16
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     65a:	36 c0       	rjmp	.+108    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '5': GLCD_DisplaySpecialPattern(GLCD_CHAR_5); break;
     65c:	2f e4       	ldi	r18, 0x4F	; 79
     65e:	39 e4       	ldi	r19, 0x49	; 73
     660:	49 e4       	ldi	r20, 0x49	; 73
     662:	51 e5       	ldi	r21, 0x51	; 81
     664:	61 e2       	ldi	r22, 0x21	; 33
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     670:	2b c0       	rjmp	.+86     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '6': GLCD_DisplaySpecialPattern(GLCD_CHAR_6); break;
     672:	2c e7       	ldi	r18, 0x7C	; 124
     674:	3a e4       	ldi	r19, 0x4A	; 74
     676:	49 e4       	ldi	r20, 0x49	; 73
     678:	59 e4       	ldi	r21, 0x49	; 73
     67a:	61 e3       	ldi	r22, 0x31	; 49
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     686:	20 c0       	rjmp	.+64     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '7': GLCD_DisplaySpecialPattern(GLCD_CHAR_7); break;
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	39 e4       	ldi	r19, 0x49	; 73
     68c:	49 e2       	ldi	r20, 0x29	; 41
     68e:	59 e1       	ldi	r21, 0x19	; 25
     690:	6f e0       	ldi	r22, 0x0F	; 15
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     69c:	15 c0       	rjmp	.+42     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '8': GLCD_DisplaySpecialPattern(GLCD_CHAR_8); break;
     69e:	27 e7       	ldi	r18, 0x77	; 119
     6a0:	39 e4       	ldi	r19, 0x49	; 73
     6a2:	49 e4       	ldi	r20, 0x49	; 73
     6a4:	59 e4       	ldi	r21, 0x49	; 73
     6a6:	67 e7       	ldi	r22, 0x77	; 119
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
     6b2:	0a c0       	rjmp	.+20     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			case '9': GLCD_DisplaySpecialPattern(GLCD_CHAR_9); break;
     6b4:	2f e4       	ldi	r18, 0x4F	; 79
     6b6:	39 e4       	ldi	r19, 0x49	; 73
     6b8:	49 e4       	ldi	r20, 0x49	; 73
     6ba:	59 e4       	ldi	r21, 0x49	; 73
     6bc:	6f e7       	ldi	r22, 0x7F	; 127
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
			default: break;
		}
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
     6c8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <gu8_Curr_X_Address>
     6cc:	88 54       	subi	r24, 0x48	; 72
     6ce:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
     6d2:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     6d6:	80 5c       	subi	r24, 0xC0	; 192
     6d8:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
		GLCD_SendData(0);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <GLCD_SendData>
		gu8_Curr_Y_Address++;
     6e2:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <gu8_Curr_Y_Address>
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <gu8_Curr_Y_Address>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
     6ec:	80 34       	cpi	r24, 0x40	; 64
     6ee:	48 f0       	brcs	.+18     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
     6f0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     6f4:	81 11       	cpse	r24, r1
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
			GLCD_SelectPage(GLCD_PAGE_1);
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
     6fe:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu8_Curr_Y_Address>
     702:	08 95       	ret

00000704 <GLCD_DisplayString>:
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
	while (*Data_Ptr != '\0') {
     70a:	88 81       	ld	r24, Y
     70c:	88 23       	and	r24, r24
     70e:	31 f0       	breq	.+12     	; 0x71c <GLCD_DisplayString+0x18>
     710:	21 96       	adiw	r28, 0x01	; 1
		GLCD_DisplayCharacter(*Data_Ptr);
     712:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <GLCD_DisplayCharacter>
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
	while (*Data_Ptr != '\0') {
     716:	89 91       	ld	r24, Y+
     718:	81 11       	cpse	r24, r1
     71a:	fb cf       	rjmp	.-10     	; 0x712 <GLCD_DisplayString+0xe>
		GLCD_DisplayCharacter(*Data_Ptr);
		Data_Ptr++;
	}
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(sint32_t Data) {
     722:	8f 92       	push	r8
     724:	9f 92       	push	r9
     726:	af 92       	push	r10
     728:	bf 92       	push	r11
     72a:	cf 92       	push	r12
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	00 d0       	rcall	.+0      	; 0x73c <GLCD_DisplayInteger+0x1a>
     73c:	00 d0       	rcall	.+0      	; 0x73e <GLCD_DisplayInteger+0x1c>
     73e:	1f 92       	push	r1
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	6b 01       	movw	r12, r22
     746:	7c 01       	movw	r14, r24
	if (Data < 0) {
     748:	99 23       	and	r25, r25
     74a:	5c f4       	brge	.+22     	; 0x762 <GLCD_DisplayInteger+0x40>
		GLCD_DisplayCharacter('-');
     74c:	8d e2       	ldi	r24, 0x2D	; 45
     74e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <GLCD_DisplayCharacter>
		Data = -1 * Data;
     752:	f0 94       	com	r15
     754:	e0 94       	com	r14
     756:	d0 94       	com	r13
     758:	c0 94       	com	r12
     75a:	c1 1c       	adc	r12, r1
     75c:	d1 1c       	adc	r13, r1
     75e:	e1 1c       	adc	r14, r1
     760:	f1 1c       	adc	r15, r1
	}
	uint8_t u8Local_Digit = 0U;
	char str_reversed[5] = "";
     762:	1a 82       	std	Y+2, r1	; 0x02
     764:	19 82       	std	Y+1, r1	; 0x01
     766:	fe 01       	movw	r30, r28
     768:	33 96       	adiw	r30, 0x03	; 3
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	df 01       	movw	r26, r30
     76e:	1d 92       	st	X+, r1
     770:	8a 95       	dec	r24
     772:	e9 f7       	brne	.-6      	; 0x76e <GLCD_DisplayInteger+0x4c>
	char* str_ptr = str_reversed;
     774:	8e 01       	movw	r16, r28
     776:	0f 5f       	subi	r16, 0xFF	; 255
     778:	1f 4f       	sbci	r17, 0xFF	; 255
	do {
		u8Local_Digit = Data%10;
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
     77a:	0f 2e       	mov	r0, r31
     77c:	fa e0       	ldi	r31, 0x0A	; 10
     77e:	8f 2e       	mov	r8, r31
     780:	91 2c       	mov	r9, r1
     782:	a1 2c       	mov	r10, r1
     784:	b1 2c       	mov	r11, r1
     786:	f0 2d       	mov	r31, r0
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	a5 01       	movw	r20, r10
     78e:	94 01       	movw	r18, r8
     790:	0e 94 20 0c 	call	0x1840	; 0x1840 <__divmodsi4>
     794:	60 5d       	subi	r22, 0xD0	; 208
     796:	f8 01       	movw	r30, r16
     798:	61 93       	st	Z+, r22
     79a:	8f 01       	movw	r16, r30
		Data = Data/10;
     79c:	c2 2e       	mov	r12, r18
     79e:	d3 2e       	mov	r13, r19
     7a0:	e4 2e       	mov	r14, r20
     7a2:	f5 2e       	mov	r15, r21
		str_ptr++;
	} while (Data > 0);
     7a4:	1c 14       	cp	r1, r12
     7a6:	1d 04       	cpc	r1, r13
     7a8:	1e 04       	cpc	r1, r14
     7aa:	1f 04       	cpc	r1, r15
     7ac:	6c f3       	brlt	.-38     	; 0x788 <GLCD_DisplayInteger+0x66>
	do {
		str_ptr--;
		GLCD_DisplayCharacter(*str_ptr);
	} while (str_ptr != str_reversed);
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	7c 01       	movw	r14, r24
		Data = Data/10;
		str_ptr++;
	} while (Data > 0);
	do {
		str_ptr--;
		GLCD_DisplayCharacter(*str_ptr);
     7b4:	d8 01       	movw	r26, r16
     7b6:	8e 91       	ld	r24, -X
     7b8:	8d 01       	movw	r16, r26
     7ba:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <GLCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
     7be:	e0 16       	cp	r14, r16
     7c0:	f1 06       	cpc	r15, r17
     7c2:	c1 f7       	brne	.-16     	; 0x7b4 <GLCD_DisplayInteger+0x92>
}
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	bf 90       	pop	r11
     7e0:	af 90       	pop	r10
     7e2:	9f 90       	pop	r9
     7e4:	8f 90       	pop	r8
     7e6:	08 95       	ret

000007e8 <GLCD_DisplayFloatingPoint>:

void GLCD_DisplayFloatingPoint(fint32_t Data) {
     7e8:	8f 92       	push	r8
     7ea:	9f 92       	push	r9
     7ec:	af 92       	push	r10
     7ee:	bf 92       	push	r11
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	4b 01       	movw	r8, r22
     7fe:	5c 01       	movw	r10, r24
	/* Will display only 3 Decimal Places */
	uint16_t IntegerPart = (uint16_t)Data;
     800:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
	GLCD_DisplayInteger(IntegerPart);
     804:	6b 01       	movw	r12, r22
     806:	e1 2c       	mov	r14, r1
     808:	f1 2c       	mov	r15, r1
     80a:	c7 01       	movw	r24, r14
     80c:	b6 01       	movw	r22, r12
     80e:	0e 94 91 03 	call	0x722	; 0x722 <GLCD_DisplayInteger>
	GLCD_DisplayCharacter('.');
     812:	8e e2       	ldi	r24, 0x2E	; 46
     814:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <GLCD_DisplayCharacter>
	fint32_t DecimalPart = (Data - IntegerPart);
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	c5 01       	movw	r24, r10
     826:	b4 01       	movw	r22, r8
     828:	0e 94 07 0a 	call	0x140e	; 0x140e <__subsf3>
     82c:	d3 e0       	ldi	r29, 0x03	; 3
	uint8_t Digit = 0;
	for (uint8_t i = 0; i < 3; i++) {
		Digit = (uint8_t)(DecimalPart * 10.0);
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e2       	ldi	r20, 0x20	; 32
     834:	51 e4       	ldi	r21, 0x41	; 65
     836:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     83a:	6b 01       	movw	r12, r22
     83c:	7c 01       	movw	r14, r24
     83e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     842:	c6 2f       	mov	r28, r22
		GLCD_DisplayCharacter((char)(48+Digit));
     844:	80 e3       	ldi	r24, 0x30	; 48
     846:	8c 0f       	add	r24, r28
     848:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <GLCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
     84c:	6c 2f       	mov	r22, r28
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatsisf>
     858:	9b 01       	movw	r18, r22
     85a:	ac 01       	movw	r20, r24
     85c:	c7 01       	movw	r24, r14
     85e:	b6 01       	movw	r22, r12
     860:	0e 94 07 0a 	call	0x140e	; 0x140e <__subsf3>
     864:	d1 50       	subi	r29, 0x01	; 1
	uint16_t IntegerPart = (uint16_t)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_DisplayCharacter('.');
	fint32_t DecimalPart = (Data - IntegerPart);
	uint8_t Digit = 0;
	for (uint8_t i = 0; i < 3; i++) {
     866:	19 f7       	brne	.-58     	; 0x82e <GLCD_DisplayFloatingPoint+0x46>
		Digit = (uint8_t)(DecimalPart * 10.0);
		GLCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	9f 90       	pop	r9
     87a:	8f 90       	pop	r8
     87c:	08 95       	ret

0000087e <GLCD_GoToLine>:

void GLCD_GoToLine(uint8_t Line) {
     87e:	cf 93       	push	r28
	if (Line < GLCD_MAX_LINES) {
     880:	88 30       	cpi	r24, 0x08	; 8
     882:	78 f4       	brcc	.+30     	; 0x8a2 <GLCD_GoToLine+0x24>
     884:	c8 2f       	mov	r28, r24
		GLCD_SelectPage(GLCD_PAGE_0);
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0e 94 d5 00 	call	0x1aa	; 0x1aa <GLCD_SelectPage>
		gu8_Curr_X_Address = Line;
     88c:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <gu8_Curr_X_Address>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
     890:	88 eb       	ldi	r24, 0xB8	; 184
     892:	8c 0f       	add	r24, r28
     894:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
		gu8_Curr_Y_Address = 0;
     898:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu8_Curr_Y_Address>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
     89c:	80 e4       	ldi	r24, 0x40	; 64
     89e:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
	}
}
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <GLCD_ClearDisplay>:

void GLCD_ClearDisplay(void) {
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
	for (uint8_t Line = 0; Line < GLCD_MAX_LINES; Line++) {
     8aa:	d0 e0       	ldi	r29, 0x00	; 0
		GLCD_GoToLine(Line);
     8ac:	8d 2f       	mov	r24, r29
     8ae:	0e 94 3f 04 	call	0x87e	; 0x87e <GLCD_GoToLine>
		GLCD_SelectPage(GLCD_BOTH_PAGES);
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <GLCD_SelectPage>
     8b8:	c0 e4       	ldi	r28, 0x40	; 64
		for (uint8_t i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
     8ba:	8c 2f       	mov	r24, r28
     8bc:	0e 94 09 01 	call	0x212	; 0x212 <GLCD_SendInstruction>
			GLCD_SendData(0);
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <GLCD_SendData>
     8c6:	cf 5f       	subi	r28, 0xFF	; 255

void GLCD_ClearDisplay(void) {
	for (uint8_t Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLine(Line);
		GLCD_SelectPage(GLCD_BOTH_PAGES);
		for (uint8_t i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     8c8:	c0 38       	cpi	r28, 0x80	; 128
     8ca:	b9 f7       	brne	.-18     	; 0x8ba <GLCD_ClearDisplay+0x14>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
	}
}

void GLCD_ClearDisplay(void) {
	for (uint8_t Line = 0; Line < GLCD_MAX_LINES; Line++) {
     8cc:	df 5f       	subi	r29, 0xFF	; 255
     8ce:	d8 30       	cpi	r29, 0x08	; 8
     8d0:	69 f7       	brne	.-38     	; 0x8ac <GLCD_ClearDisplay+0x6>
		for (uint8_t i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
			GLCD_SendData(0);
		}
	}
	GLCD_Reset();
     8d2:	0e 94 8c 01 	call	0x318	; 0x318 <GLCD_Reset>
	GLCD_SelectPage(GLCD_PAGE_0);
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <GLCD_SelectPage>
	gu8_Curr_Page = 0;
     8dc:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
	GLCD_GoToLine(0);
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 3f 04 	call	0x87e	; 0x87e <GLCD_GoToLine>
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <DIO_ObtainRegister>:
DIO_StateType DIO_ReadPin(DIO_PortType Port, DIO_PinType Pin) {
	DIO_StateType eLocal_State = DIO_LOW;
	volatile uint8_t* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
	eLocal_State = get_bit(*Reg_Ptr, Pin);
	return eLocal_State;
}
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	a9 f0       	breq	.+42     	; 0x91a <DIO_ObtainRegister+0x2e>
     8f0:	28 f0       	brcs	.+10     	; 0x8fc <DIO_ObtainRegister+0x10>
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	09 f1       	breq	.+66     	; 0x938 <DIO_ObtainRegister+0x4c>
     8f6:	83 30       	cpi	r24, 0x03	; 3
     8f8:	71 f1       	breq	.+92     	; 0x956 <DIO_ObtainRegister+0x6a>
     8fa:	3c c0       	rjmp	.+120    	; 0x974 <DIO_ObtainRegister+0x88>
     8fc:	61 30       	cpi	r22, 0x01	; 1
     8fe:	21 f0       	breq	.+8      	; 0x908 <DIO_ObtainRegister+0x1c>
     900:	e0 f1       	brcs	.+120    	; 0x97a <DIO_ObtainRegister+0x8e>
     902:	62 30       	cpi	r22, 0x02	; 2
     904:	39 f0       	breq	.+14     	; 0x914 <DIO_ObtainRegister+0x28>
     906:	03 c0       	rjmp	.+6      	; 0x90e <DIO_ObtainRegister+0x22>
     908:	8b e3       	ldi	r24, 0x3B	; 59
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	08 95       	ret
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	08 95       	ret
     914:	89 e3       	ldi	r24, 0x39	; 57
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	08 95       	ret
     91a:	61 30       	cpi	r22, 0x01	; 1
     91c:	21 f0       	breq	.+8      	; 0x926 <DIO_ObtainRegister+0x3a>
     91e:	80 f1       	brcs	.+96     	; 0x980 <DIO_ObtainRegister+0x94>
     920:	62 30       	cpi	r22, 0x02	; 2
     922:	39 f0       	breq	.+14     	; 0x932 <DIO_ObtainRegister+0x46>
     924:	03 c0       	rjmp	.+6      	; 0x92c <DIO_ObtainRegister+0x40>
     926:	88 e3       	ldi	r24, 0x38	; 56
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	08 95       	ret
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	08 95       	ret
     932:	86 e3       	ldi	r24, 0x36	; 54
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	08 95       	ret
     938:	61 30       	cpi	r22, 0x01	; 1
     93a:	21 f0       	breq	.+8      	; 0x944 <DIO_ObtainRegister+0x58>
     93c:	20 f1       	brcs	.+72     	; 0x986 <DIO_ObtainRegister+0x9a>
     93e:	62 30       	cpi	r22, 0x02	; 2
     940:	39 f0       	breq	.+14     	; 0x950 <DIO_ObtainRegister+0x64>
     942:	03 c0       	rjmp	.+6      	; 0x94a <DIO_ObtainRegister+0x5e>
     944:	85 e3       	ldi	r24, 0x35	; 53
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	08 95       	ret
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	08 95       	ret
     950:	83 e3       	ldi	r24, 0x33	; 51
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	08 95       	ret
     956:	61 30       	cpi	r22, 0x01	; 1
     958:	21 f0       	breq	.+8      	; 0x962 <DIO_ObtainRegister+0x76>
     95a:	c0 f0       	brcs	.+48     	; 0x98c <DIO_ObtainRegister+0xa0>
     95c:	62 30       	cpi	r22, 0x02	; 2
     95e:	39 f0       	breq	.+14     	; 0x96e <DIO_ObtainRegister+0x82>
     960:	03 c0       	rjmp	.+6      	; 0x968 <DIO_ObtainRegister+0x7c>
     962:	82 e3       	ldi	r24, 0x32	; 50
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	08 95       	ret
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	08 95       	ret
     96e:	80 e3       	ldi	r24, 0x30	; 48
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	08 95       	ret
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	08 95       	ret
     97a:	8a e3       	ldi	r24, 0x3A	; 58
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	08 95       	ret
     980:	87 e3       	ldi	r24, 0x37	; 55
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	08 95       	ret
     986:	84 e3       	ldi	r24, 0x34	; 52
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	08 95       	ret
     98c:	81 e3       	ldi	r24, 0x31	; 49
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	08 95       	ret

00000992 <DIO_SetPinDirection>:
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	d6 2f       	mov	r29, r22
     998:	c4 2f       	mov	r28, r20
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	0e 94 76 04 	call	0x8ec	; 0x8ec <DIO_ObtainRegister>
     9a0:	cc 23       	and	r28, r28
     9a2:	19 f0       	breq	.+6      	; 0x9aa <DIO_SetPinDirection+0x18>
     9a4:	c1 30       	cpi	r28, 0x01	; 1
     9a6:	71 f0       	breq	.+28     	; 0x9c4 <DIO_SetPinDirection+0x32>
     9a8:	18 c0       	rjmp	.+48     	; 0x9da <DIO_SetPinDirection+0x48>
     9aa:	fc 01       	movw	r30, r24
     9ac:	40 81       	ld	r20, Z
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_SetPinDirection+0x26>
     9b4:	22 0f       	add	r18, r18
     9b6:	33 1f       	adc	r19, r19
     9b8:	da 95       	dec	r29
     9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_SetPinDirection+0x22>
     9bc:	20 95       	com	r18
     9be:	24 23       	and	r18, r20
     9c0:	20 83       	st	Z, r18
     9c2:	0b c0       	rjmp	.+22     	; 0x9da <DIO_SetPinDirection+0x48>
     9c4:	fc 01       	movw	r30, r24
     9c6:	40 81       	ld	r20, Z
     9c8:	21 e0       	ldi	r18, 0x01	; 1
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_SetPinDirection+0x40>
     9ce:	22 0f       	add	r18, r18
     9d0:	33 1f       	adc	r19, r19
     9d2:	da 95       	dec	r29
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_SetPinDirection+0x3c>
     9d6:	24 2b       	or	r18, r20
     9d8:	20 83       	st	Z, r18
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <DIO_WritePin>:
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	d6 2f       	mov	r29, r22
     9e6:	c4 2f       	mov	r28, r20
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	0e 94 76 04 	call	0x8ec	; 0x8ec <DIO_ObtainRegister>
     9ee:	cc 23       	and	r28, r28
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <DIO_WritePin+0x18>
     9f2:	c1 30       	cpi	r28, 0x01	; 1
     9f4:	71 f0       	breq	.+28     	; 0xa12 <DIO_WritePin+0x32>
     9f6:	18 c0       	rjmp	.+48     	; 0xa28 <DIO_WritePin+0x48>
     9f8:	fc 01       	movw	r30, r24
     9fa:	40 81       	ld	r20, Z
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <DIO_WritePin+0x26>
     a02:	22 0f       	add	r18, r18
     a04:	33 1f       	adc	r19, r19
     a06:	da 95       	dec	r29
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <DIO_WritePin+0x22>
     a0a:	20 95       	com	r18
     a0c:	24 23       	and	r18, r20
     a0e:	20 83       	st	Z, r18
     a10:	0b c0       	rjmp	.+22     	; 0xa28 <DIO_WritePin+0x48>
     a12:	fc 01       	movw	r30, r24
     a14:	40 81       	ld	r20, Z
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <DIO_WritePin+0x40>
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	da 95       	dec	r29
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <DIO_WritePin+0x3c>
     a24:	24 2b       	or	r18, r20
     a26:	20 83       	st	Z, r18
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	08 95       	ret

00000a2e <DIO_SetPortDirection>:


void DIO_SetPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
     a2e:	cf 93       	push	r28
     a30:	c6 2f       	mov	r28, r22
	volatile uint8_t* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	0e 94 76 04 	call	0x8ec	; 0x8ec <DIO_ObtainRegister>
	switch (Direction) {
     a38:	cc 23       	and	r28, r28
     a3a:	19 f0       	breq	.+6      	; 0xa42 <DIO_SetPortDirection+0x14>
     a3c:	c1 30       	cpi	r28, 0x01	; 1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <DIO_SetPortDirection+0x1a>
     a40:	06 c0       	rjmp	.+12     	; 0xa4e <DIO_SetPortDirection+0x20>
		case DIO_INPUT: *Reg_Ptr = 0x00U; break;
     a42:	fc 01       	movw	r30, r24
     a44:	10 82       	st	Z, r1
     a46:	03 c0       	rjmp	.+6      	; 0xa4e <DIO_SetPortDirection+0x20>
		case DIO_OUTPUT: *Reg_Ptr = 0xFFU; break;
     a48:	2f ef       	ldi	r18, 0xFF	; 255
     a4a:	fc 01       	movw	r30, r24
     a4c:	20 83       	st	Z, r18
		default: break;
	}
}
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <DIO_WritePort>:

void DIO_WritePort(DIO_PortType Port, uint8_t Value) {
     a52:	cf 93       	push	r28
     a54:	c6 2f       	mov	r28, r22
	volatile uint8_t* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
     a56:	61 e0       	ldi	r22, 0x01	; 1
     a58:	0e 94 76 04 	call	0x8ec	; 0x8ec <DIO_ObtainRegister>
	*Reg_Ptr = Value;
     a5c:	fc 01       	movw	r30, r24
     a5e:	c0 83       	st	Z, r28
}
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <ICU_SetTriggerEdge>:
	switch (Tmr_Channel) {
		case ICU_TIMER_1: u16Local_Value = (*(uint16_t*)TIMER1_INP_CAPT_REG_L);
		default: break;
	}
	return u16Local_Value;
}
     a64:	9e b5       	in	r25, 0x2e	; 46
     a66:	9f 7b       	andi	r25, 0xBF	; 191
     a68:	9e bd       	out	0x2e, r25	; 46
     a6a:	81 11       	cpse	r24, r1
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <ICU_SetTriggerEdge+0x18>
     a6e:	8e b5       	in	r24, 0x2e	; 46
     a70:	90 e4       	ldi	r25, 0x40	; 64
     a72:	69 9f       	mul	r22, r25
     a74:	b0 01       	movw	r22, r0
     a76:	11 24       	eor	r1, r1
     a78:	68 2b       	or	r22, r24
     a7a:	6e bd       	out	0x2e, r22	; 46
     a7c:	08 95       	ret

00000a7e <ICU_GetStatus>:

ICU_StatusType ICU_GetStatus(ICU_TimerChannelType Tmr_Channel) {
	switch (Tmr_Channel) {
     a7e:	81 11       	cpse	r24, r1
     a80:	08 c0       	rjmp	.+16     	; 0xa92 <ICU_GetStatus+0x14>
		case ICU_TIMER_1:
		if (get_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
     a82:	08 b6       	in	r0, 0x38	; 56
     a84:	05 fe       	sbrs	r0, 5
     a86:	07 c0       	rjmp	.+14     	; 0xa96 <ICU_GetStatus+0x18>
			set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
     a88:	88 b7       	in	r24, 0x38	; 56
     a8a:	80 62       	ori	r24, 0x20	; 32
     a8c:	88 bf       	out	0x38, r24	; 56
			return ICU_EVENT_CATURED;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	08 95       	ret
			} else {
			return ICU_RUNNING;
		}
		default: break;
	}
	return ICU_RUNNING;
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	08 95       	ret
		case ICU_TIMER_1:
		if (get_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
			set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
			return ICU_EVENT_CATURED;
			} else {
			return ICU_RUNNING;
     a96:	80 e0       	ldi	r24, 0x00	; 0
		}
		default: break;
	}
	return ICU_RUNNING;
}
     a98:	08 95       	ret

00000a9a <ICU_InitTimer1>:
}

/************************************************************************/
/*					Private Functions Implementations                   */
/************************************************************************/
void ICU_InitTimer1(const ICU_ConfigurationType* Config_Ptr) {
     a9a:	fc 01       	movw	r30, r24
	/* Set ICP1 Pin (on PD6) as Input to trigger the ICU */
	clr_bit(*PORTD_DIR_REG, 6U);
     a9c:	8e 98       	cbi	0x11, 6	; 17
	/* Clear Configurations on TCCR1A and TCCR1B */
	*TIMER1_CTRL_REG_A = 0x00U;
     a9e:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
     aa0:	1e bc       	out	0x2e, r1	; 46
	/* Timer 1 mode is set to normal */
	/* Set Prescaler */
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale);
     aa2:	9e b5       	in	r25, 0x2e	; 46
     aa4:	81 81       	ldd	r24, Z+1	; 0x01
     aa6:	89 2b       	or	r24, r25
     aa8:	8e bd       	out	0x2e, r24	; 46
	/* Set Trigger Edge (Falling or Rising) */
	*TIMER1_CTRL_REG_B |= ((Config_Ptr->Trigger_Edge)<<ICU_TIMER1_EDGE_SELECT_BIT);
     aaa:	8e b5       	in	r24, 0x2e	; 46
     aac:	92 81       	ldd	r25, Z+2	; 0x02
     aae:	40 e4       	ldi	r20, 0x40	; 64
     ab0:	94 9f       	mul	r25, r20
     ab2:	90 01       	movw	r18, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	28 2b       	or	r18, r24
     ab8:	2e bd       	out	0x2e, r18	; 46
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<ICU_TIMER1_INT_BIT);
     aba:	29 b7       	in	r18, 0x39	; 57
     abc:	93 81       	ldd	r25, Z+3	; 0x03
     abe:	30 e2       	ldi	r19, 0x20	; 32
     ac0:	93 9f       	mul	r25, r19
     ac2:	c0 01       	movw	r24, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	82 2b       	or	r24, r18
     ac8:	89 bf       	out	0x39, r24	; 57
	/* Clear Timer 1 and ICR Values */
	*(uint16_t*)TIMER1_CNTR_REG_L = 0x0000U;
     aca:	1d bc       	out	0x2d, r1	; 45
     acc:	1c bc       	out	0x2c, r1	; 44
	*(uint16_t*)TIMER1_INP_CAPT_REG_L = 0x0000U;
     ace:	17 bc       	out	0x27, r1	; 39
     ad0:	16 bc       	out	0x26, r1	; 38
     ad2:	08 95       	ret

00000ad4 <ICU_Init>:

/************************************************************************/
/*					Functions Implementations                           */
/************************************************************************/
void ICU_Init(const ICU_ConfigurationType* Config_Ptr) {
	switch (Config_Ptr->Tmr_Channel) {
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 81       	ld	r18, Z
     ad8:	21 11       	cpse	r18, r1
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <ICU_Init+0xc>
		case ICU_TIMER_1: ICU_InitTimer1(Config_Ptr); break;
     adc:	0e 94 4d 05 	call	0xa9a	; 0xa9a <ICU_InitTimer1>
     ae0:	08 95       	ret

00000ae2 <ICU_GetDutyCycle_Timer1>:
	/* Clear Timer 1 and ICR Values */
	*(uint16_t*)TIMER1_CNTR_REG_L = 0x0000U;
	*(uint16_t*)TIMER1_INP_CAPT_REG_L = 0x0000U;
}

void ICU_GetDutyCycle_Timer1(uint16_t Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
     ae2:	4f 92       	push	r4
     ae4:	5f 92       	push	r5
     ae6:	6f 92       	push	r6
     ae8:	7f 92       	push	r7
     aea:	8f 92       	push	r8
     aec:	9f 92       	push	r9
     aee:	af 92       	push	r10
     af0:	bf 92       	push	r11
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
     b04:	8b 01       	movw	r16, r22
	/* Clear Input Capture Flag for safety */
	set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     b06:	88 b7       	in	r24, 0x38	; 56
     b08:	80 62       	ori	r24, 0x20	; 32
     b0a:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 32 05 	call	0xa64	; 0xa64 <ICU_SetTriggerEdge>
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0e 94 3f 05 	call	0xa7e	; 0xa7e <ICU_GetStatus>
     b1a:	88 23       	and	r24, r24
     b1c:	d9 f3       	breq	.-10     	; 0xb14 <ICU_GetDutyCycle_Timer1+0x32>
		; // Do Nothing
	}

	uint32_t u32Local_ON_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 32 05 	call	0xa64	; 0xa64 <ICU_SetTriggerEdge>
	}
}

void ICU_ClearTimerValue(ICU_TimerChannelType Tmr_Channel) {
	switch (Tmr_Channel) {
		case ICU_TIMER_1: *(uint16_t*)TIMER1_CNTR_REG_L = 0x0000U; break;
     b26:	1d bc       	out	0x2d, r1	; 45
     b28:	1c bc       	out	0x2c, r1	; 44

	uint32_t u32Local_ON_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     b2a:	88 b7       	in	r24, 0x38	; 56
     b2c:	80 62       	ori	r24, 0x20	; 32
     b2e:	88 bf       	out	0x38, r24	; 56
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		; // Do Nothing
	}

	uint32_t u32Local_ON_Counts = 0U;
     b30:	c1 2c       	mov	r12, r1
     b32:	d1 2c       	mov	r13, r1
     b34:	76 01       	movw	r14, r12
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     b36:	09 c0       	rjmp	.+18     	; 0xb4a <ICU_GetDutyCycle_Timer1+0x68>
		if (get_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     b38:	08 b6       	in	r0, 0x38	; 56
     b3a:	02 fe       	sbrs	r0, 2
     b3c:	06 c0       	rjmp	.+12     	; 0xb4a <ICU_GetDutyCycle_Timer1+0x68>
			set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     b3e:	88 b7       	in	r24, 0x38	; 56
     b40:	84 60       	ori	r24, 0x04	; 4
     b42:	88 bf       	out	0x38, r24	; 56
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
     b44:	8f ef       	ldi	r24, 0xFF	; 255
     b46:	e8 1a       	sub	r14, r24
     b48:	f8 0a       	sbc	r15, r24
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <ICU_GetStatus>
     b50:	88 23       	and	r24, r24
     b52:	91 f3       	breq	.-28     	; 0xb38 <ICU_GetDutyCycle_Timer1+0x56>
		if (get_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_ON_Counts += ICU_GetInputCaptureValue(ICU_TIMER_1);
     b54:	86 b5       	in	r24, 0x26	; 38
     b56:	97 b5       	in	r25, 0x27	; 39
     b58:	c8 0e       	add	r12, r24
     b5a:	d9 1e       	adc	r13, r25
     b5c:	e1 1c       	adc	r14, r1
     b5e:	f1 1c       	adc	r15, r1

	uint32_t u32Local_OFF_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 32 05 	call	0xa64	; 0xa64 <ICU_SetTriggerEdge>
	}
}

void ICU_ClearTimerValue(ICU_TimerChannelType Tmr_Channel) {
	switch (Tmr_Channel) {
		case ICU_TIMER_1: *(uint16_t*)TIMER1_CNTR_REG_L = 0x0000U; break;
     b68:	1d bc       	out	0x2d, r1	; 45
     b6a:	1c bc       	out	0x2c, r1	; 44

	uint32_t u32Local_OFF_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     b6c:	88 b7       	in	r24, 0x38	; 56
     b6e:	80 62       	ori	r24, 0x20	; 32
     b70:	88 bf       	out	0x38, r24	; 56
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     b72:	06 c0       	rjmp	.+12     	; 0xb80 <ICU_GetDutyCycle_Timer1+0x9e>
		if (get_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     b74:	08 b6       	in	r0, 0x38	; 56
     b76:	02 fe       	sbrs	r0, 2
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <ICU_GetDutyCycle_Timer1+0x9e>
			set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     b7a:	88 b7       	in	r24, 0x38	; 56
     b7c:	84 60       	ori	r24, 0x04	; 4
     b7e:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 3f 05 	call	0xa7e	; 0xa7e <ICU_GetStatus>
     b86:	88 23       	and	r24, r24
     b88:	a9 f3       	breq	.-22     	; 0xb74 <ICU_GetDutyCycle_Timer1+0x92>
		if (get_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			set_bit(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetInputCaptureValue(ICU_TIMER_1);
     b8a:	86 b4       	in	r8, 0x26	; 38
     b8c:	97 b4       	in	r9, 0x27	; 39
     b8e:	a1 2c       	mov	r10, r1
     b90:	b1 2c       	mov	r11, r1

	/* Set counts */
	//strLocal_Duty.High_Time = u32Local_ON_Counts;
	//strLocal_Duty.Period_Time = u32Local_ON_Counts + u32Local_OFF_Counts;
	/* Convert these into milliseconds */
	Duty_Ptr->High_Time = (fint32_t)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
     b92:	2e 01       	movw	r4, r28
     b94:	61 2c       	mov	r6, r1
     b96:	71 2c       	mov	r7, r1
     b98:	a7 01       	movw	r20, r14
     b9a:	96 01       	movw	r18, r12
     b9c:	c3 01       	movw	r24, r6
     b9e:	b2 01       	movw	r22, r4
     ba0:	0e 94 10 0c 	call	0x1820	; 0x1820 <__mulsi3>
     ba4:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	4a e7       	ldi	r20, 0x7A	; 122
     bae:	54 e4       	ldi	r21, 0x44	; 68
     bb0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	34 e2       	ldi	r19, 0x24	; 36
     bb8:	44 e7       	ldi	r20, 0x74	; 116
     bba:	5b e4       	ldi	r21, 0x4B	; 75
     bbc:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     bc0:	f8 01       	movw	r30, r16
     bc2:	60 83       	st	Z, r22
     bc4:	71 83       	std	Z+1, r23	; 0x01
     bc6:	82 83       	std	Z+2, r24	; 0x02
     bc8:	93 83       	std	Z+3, r25	; 0x03
	Duty_Ptr->Period_Time = (fint32_t)((u32Local_ON_Counts+u32Local_OFF_Counts) * Prescale_Value * 1000.0 / F_CPU);
     bca:	a7 01       	movw	r20, r14
     bcc:	96 01       	movw	r18, r12
     bce:	28 0d       	add	r18, r8
     bd0:	39 1d       	adc	r19, r9
     bd2:	4a 1d       	adc	r20, r10
     bd4:	5b 1d       	adc	r21, r11
     bd6:	c3 01       	movw	r24, r6
     bd8:	b2 01       	movw	r22, r4
     bda:	0e 94 10 0c 	call	0x1820	; 0x1820 <__mulsi3>
     bde:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	4a e7       	ldi	r20, 0x7A	; 122
     be8:	54 e4       	ldi	r21, 0x44	; 68
     bea:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	34 e2       	ldi	r19, 0x24	; 36
     bf2:	44 e7       	ldi	r20, 0x74	; 116
     bf4:	5b e4       	ldi	r21, 0x4B	; 75
     bf6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     bfa:	f8 01       	movw	r30, r16
     bfc:	64 83       	std	Z+4, r22	; 0x04
     bfe:	75 83       	std	Z+5, r23	; 0x05
     c00:	86 83       	std	Z+6, r24	; 0x06
     c02:	97 83       	std	Z+7, r25	; 0x07
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	bf 90       	pop	r11
     c16:	af 90       	pop	r10
     c18:	9f 90       	pop	r9
     c1a:	8f 90       	pop	r8
     c1c:	7f 90       	pop	r7
     c1e:	6f 90       	pop	r6
     c20:	5f 90       	pop	r5
     c22:	4f 90       	pop	r4
     c24:	08 95       	ret

00000c26 <ICU_GetDutyCycle>:
	}
	return ICU_RUNNING;
}

void ICU_GetDutyCycle(ICU_TimerChannelType Tmr_Channel, uint16_t Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
	switch (Tmr_Channel) {
     c26:	81 11       	cpse	r24, r1
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <ICU_GetDutyCycle+0xc>
     c2a:	cb 01       	movw	r24, r22
		case ICU_TIMER_1:
		ICU_GetDutyCycle_Timer1(Prescale_Value, Duty_Ptr);
     c2c:	ba 01       	movw	r22, r20
     c2e:	0e 94 71 05 	call	0xae2	; 0xae2 <ICU_GetDutyCycle_Timer1>
     c32:	08 95       	ret

00000c34 <PWM_InitTimer0>:
}

/************************************************************************/
/*				Private Functions Implementations                       */
/************************************************************************/
void PWM_InitTimer0(const PWM_ConfigurationType* Config_Ptr) {
     c34:	fc 01       	movw	r30, r24
	/* Make PB3=OC0 as output */
	// DIO_SetPinDirection(DIO_PORT_B, DIO_PIN_3, DIO_OUTPUT);
	set_bit(*PORTB_DIR_REG, 3U);
     c36:	bb 9a       	sbi	0x17, 3	; 23
	/* Clear TCCR0 Register Configurations */
	*TIMER0_CTRL_REG = 0x00U;
     c38:	13 be       	out	0x33, r1	; 51
	/* Set PWM Mode */
	*TIMER0_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_0_FAST_BIT);
     c3a:	93 b7       	in	r25, 0x33	; 51
     c3c:	81 81       	ldd	r24, Z+1	; 0x01
     c3e:	88 0f       	add	r24, r24
     c40:	88 0f       	add	r24, r24
     c42:	88 0f       	add	r24, r24
     c44:	90 64       	ori	r25, 0x40	; 64
     c46:	98 2b       	or	r25, r24
     c48:	93 bf       	out	0x33, r25	; 51
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_0_INVERTING_BIT);
     c4a:	93 b7       	in	r25, 0x33	; 51
     c4c:	83 81       	ldd	r24, Z+3	; 0x03
     c4e:	82 95       	swap	r24
     c50:	80 7f       	andi	r24, 0xF0	; 240
     c52:	90 62       	ori	r25, 0x20	; 32
     c54:	98 2b       	or	r25, r24
     c56:	93 bf       	out	0x33, r25	; 51
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	84 30       	cpi	r24, 0x04	; 4
     c5c:	69 f0       	breq	.+26     	; 0xc78 <PWM_InitTimer0+0x44>
     c5e:	18 f4       	brcc	.+6      	; 0xc66 <PWM_InitTimer0+0x32>
     c60:	83 30       	cpi	r24, 0x03	; 3
     c62:	30 f0       	brcs	.+12     	; 0xc70 <PWM_InitTimer0+0x3c>
     c64:	11 c0       	rjmp	.+34     	; 0xc88 <PWM_InitTimer0+0x54>
     c66:	9a ef       	ldi	r25, 0xFA	; 250
     c68:	98 0f       	add	r25, r24
     c6a:	94 30       	cpi	r25, 0x04	; 4
     c6c:	48 f0       	brcs	.+18     	; 0xc80 <PWM_InitTimer0+0x4c>
     c6e:	0c c0       	rjmp	.+24     	; 0xc88 <PWM_InitTimer0+0x54>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
		*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
     c70:	93 b7       	in	r25, 0x33	; 51
     c72:	89 2b       	or	r24, r25
     c74:	83 bf       	out	0x33, r24	; 51
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <PWM_InitTimer0+0x54>
		case PWM_PRESCALE_64:
		*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-1U); break;
     c78:	83 b7       	in	r24, 0x33	; 51
     c7a:	83 60       	ori	r24, 0x03	; 3
     c7c:	83 bf       	out	0x33, r24	; 51
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <PWM_InitTimer0+0x54>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
		*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
     c80:	93 b7       	in	r25, 0x33	; 51
     c82:	82 50       	subi	r24, 0x02	; 2
     c84:	89 2b       	or	r24, r25
     c86:	83 bf       	out	0x33, r24	; 51
		default: break;
	}
	/* Set Duty Value in OCR0 Register */
	*TIMER0_CMP_REG = 0x00U;
     c88:	1c be       	out	0x3c, r1	; 60
	switch (Config_Ptr->State) {
     c8a:	83 81       	ldd	r24, Z+3	; 0x03
     c8c:	88 23       	and	r24, r24
     c8e:	19 f0       	breq	.+6      	; 0xc96 <PWM_InitTimer0+0x62>
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	a1 f0       	breq	.+40     	; 0xcbc <PWM_InitTimer0+0x88>
     c94:	30 c0       	rjmp	.+96     	; 0xcf6 <PWM_InitTimer0+0xc2>
		case PWM_NON_INVERTED: *TIMER0_CMP_REG = (uint8_t)((Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
     c96:	60 85       	ldd	r22, Z+8	; 0x08
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	68 9f       	mul	r22, r24
     c9c:	b0 01       	movw	r22, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	48 ec       	ldi	r20, 0xC8	; 200
     cae:	52 e4       	ldi	r21, 0x42	; 66
     cb0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     cb4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     cb8:	6c bf       	out	0x3c, r22	; 60
     cba:	1d c0       	rjmp	.+58     	; 0xcf6 <PWM_InitTimer0+0xc2>
		case PWM_INVERTED: *TIMER0_CMP_REG = (uint8_t)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
     cbc:	60 85       	ldd	r22, Z+8	; 0x08
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatsisf>
     cc8:	9b 01       	movw	r18, r22
     cca:	ac 01       	movw	r20, r24
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	88 ec       	ldi	r24, 0xC8	; 200
     cd2:	92 e4       	ldi	r25, 0x42	; 66
     cd4:	0e 94 07 0a 	call	0x140e	; 0x140e <__subsf3>
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	4f e7       	ldi	r20, 0x7F	; 127
     cde:	53 e4       	ldi	r21, 0x43	; 67
     ce0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	48 ec       	ldi	r20, 0xC8	; 200
     cea:	52 e4       	ldi	r21, 0x42	; 66
     cec:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     cf0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     cf4:	6c bf       	out	0x3c, r22	; 60
		default: break;
	}
	/* Clear TCNT0 Register Configurations */
	*TIMER0_CNTR_REG = 0x00U;
     cf6:	12 be       	out	0x32, r1	; 50
     cf8:	08 95       	ret

00000cfa <PWM_InitTimer1>:
}

void PWM_InitTimer1(const PWM_ConfigurationType* Config_Ptr) {
     cfa:	cf 92       	push	r12
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	ec 01       	movw	r28, r24
	/* Make PD5=OC1A or PD4=OC1B as output */
	switch (Config_Ptr->Tmr_Channel) {
     d08:	88 81       	ld	r24, Y
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	19 f0       	breq	.+6      	; 0xd14 <PWM_InitTimer1+0x1a>
     d0e:	82 30       	cpi	r24, 0x02	; 2
     d10:	19 f0       	breq	.+6      	; 0xd18 <PWM_InitTimer1+0x1e>
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <PWM_InitTimer1+0x20>
		case PWM_TIMER_1_CHANNEL_A:
		//DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_5, DIO_OUTPUT);
		set_bit(*PORTD_DIR_REG, 5U);
     d14:	8d 9a       	sbi	0x11, 5	; 17
		break;
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <PWM_InitTimer1+0x20>
		case PWM_TIMER_1_CHANNEL_B:
		//DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_4, DIO_OUTPUT);
		set_bit(*PORTD_DIR_REG, 4U);
     d18:	8c 9a       	sbi	0x11, 4	; 17
		break;
		default: break;
	}
	/* Clear TCCR1A and TCCR1B Register Configurations */
	*TIMER1_CTRL_REG_A = 0x00U;
     d1a:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
     d1c:	1e bc       	out	0x2e, r1	; 46
	/* Set PWM Mode */
	*TIMER1_CTRL_REG_A |= (0x02U);
     d1e:	8f b5       	in	r24, 0x2f	; 47
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	8f bd       	out	0x2f, r24	; 47
	*TIMER1_CTRL_REG_B |= (1U<<4U) | ((Config_Ptr->Mode)<<PWM_TIMER_1_FAST_BIT);
     d24:	8e b5       	in	r24, 0x2e	; 46
     d26:	99 81       	ldd	r25, Y+1	; 0x01
     d28:	99 0f       	add	r25, r25
     d2a:	99 0f       	add	r25, r25
     d2c:	99 0f       	add	r25, r25
     d2e:	80 61       	ori	r24, 0x10	; 16
     d30:	89 2b       	or	r24, r25
     d32:	8e bd       	out	0x2e, r24	; 46
	/* Set Output State and Channel OC1A or OC1B */
	switch (Config_Ptr->Tmr_Channel) {
     d34:	88 81       	ld	r24, Y
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	19 f0       	breq	.+6      	; 0xd40 <PWM_InitTimer1+0x46>
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	51 f0       	breq	.+20     	; 0xd52 <PWM_InitTimer1+0x58>
     d3e:	10 c0       	rjmp	.+32     	; 0xd60 <PWM_InitTimer1+0x66>
		case PWM_TIMER_1_CHANNEL_A:
		*TIMER1_CTRL_REG_A |= (1U<<7U) | ((Config_Ptr->State)<<PWM_TIMER_1_A_INVERTING_BIT);
     d40:	8f b5       	in	r24, 0x2f	; 47
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	92 95       	swap	r25
     d46:	99 0f       	add	r25, r25
     d48:	99 0f       	add	r25, r25
     d4a:	90 7c       	andi	r25, 0xC0	; 192
     d4c:	80 68       	ori	r24, 0x80	; 128
     d4e:	89 2b       	or	r24, r25
     d50:	8f bd       	out	0x2f, r24	; 47
		case PWM_TIMER_1_CHANNEL_B:
		*TIMER1_CTRL_REG_A |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_1_B_INVERTING_BIT);
     d52:	8f b5       	in	r24, 0x2f	; 47
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	92 95       	swap	r25
     d58:	90 7f       	andi	r25, 0xF0	; 240
     d5a:	80 62       	ori	r24, 0x20	; 32
     d5c:	89 2b       	or	r24, r25
     d5e:	8f bd       	out	0x2f, r24	; 47
		break;
		default: break;
	}
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	69 f0       	breq	.+26     	; 0xd80 <PWM_InitTimer1+0x86>
     d66:	18 f4       	brcc	.+6      	; 0xd6e <PWM_InitTimer1+0x74>
     d68:	83 30       	cpi	r24, 0x03	; 3
     d6a:	30 f0       	brcs	.+12     	; 0xd78 <PWM_InitTimer1+0x7e>
     d6c:	11 c0       	rjmp	.+34     	; 0xd90 <PWM_InitTimer1+0x96>
     d6e:	9a ef       	ldi	r25, 0xFA	; 250
     d70:	98 0f       	add	r25, r24
     d72:	94 30       	cpi	r25, 0x04	; 4
     d74:	48 f0       	brcs	.+18     	; 0xd88 <PWM_InitTimer1+0x8e>
     d76:	0c c0       	rjmp	.+24     	; 0xd90 <PWM_InitTimer1+0x96>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
		*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale); break;
     d78:	9e b5       	in	r25, 0x2e	; 46
     d7a:	89 2b       	or	r24, r25
     d7c:	8e bd       	out	0x2e, r24	; 46
     d7e:	08 c0       	rjmp	.+16     	; 0xd90 <PWM_InitTimer1+0x96>
		case PWM_PRESCALE_64:
		*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-1U); break;
     d80:	8e b5       	in	r24, 0x2e	; 46
     d82:	83 60       	ori	r24, 0x03	; 3
     d84:	8e bd       	out	0x2e, r24	; 46
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <PWM_InitTimer1+0x96>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
		*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-2U); break;
     d88:	9e b5       	in	r25, 0x2e	; 46
     d8a:	82 50       	subi	r24, 0x02	; 2
     d8c:	89 2b       	or	r24, r25
     d8e:	8e bd       	out	0x2e, r24	; 46
		default: break;
	}
	/* Set Period through TOP Value in ICR1 Register */
	gu16_PWM_TimerTopValue = (uint16_t)((F_CPU * (Config_Ptr->Period_ms) / ((Config_Ptr->Prescale_Value) * 1000.0)) - 1U);
     d90:	ae 81       	ldd	r26, Y+6	; 0x06
     d92:	bf 81       	ldd	r27, Y+7	; 0x07
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	34 e2       	ldi	r19, 0x24	; 36
     d98:	44 ef       	ldi	r20, 0xF4	; 244
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	0e 94 45 0c 	call	0x188a	; 0x188a <__muluhisi3>
     da0:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatsisf>
     da4:	6b 01       	movw	r12, r22
     da6:	7c 01       	movw	r14, r24
     da8:	6c 81       	ldd	r22, Y+4	; 0x04
     daa:	7d 81       	ldd	r23, Y+5	; 0x05
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a e7       	ldi	r20, 0x7A	; 122
     dba:	54 e4       	ldi	r21, 0x44	; 68
     dbc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     dc0:	9b 01       	movw	r18, r22
     dc2:	ac 01       	movw	r20, r24
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e8       	ldi	r20, 0x80	; 128
     dd2:	5f e3       	ldi	r21, 0x3F	; 63
     dd4:	0e 94 07 0a 	call	0x140e	; 0x140e <__subsf3>
     dd8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     ddc:	70 93 ae 00 	sts	0x00AE, r23	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
     de0:	60 93 ad 00 	sts	0x00AD, r22	; 0x8000ad <gu16_PWM_TimerTopValue>
	*(uint16_t*)TIMER1_INP_CAPT_REG_L = gu16_PWM_TimerTopValue;
     de4:	77 bd       	out	0x27, r23	; 39
     de6:	66 bd       	out	0x26, r22	; 38
	/* Set Duty Value in OCR1A or OCR1B Register */
	switch (Config_Ptr->Tmr_Channel) {
     de8:	88 81       	ld	r24, Y
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	21 f0       	breq	.+8      	; 0xdf6 <PWM_InitTimer1+0xfc>
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	09 f4       	brne	.+2      	; 0xdf4 <PWM_InitTimer1+0xfa>
     df2:	49 c0       	rjmp	.+146    	; 0xe86 <PWM_InitTimer1+0x18c>
     df4:	8f c0       	rjmp	.+286    	; 0xf14 <PWM_InitTimer1+0x21a>
		case PWM_TIMER_1_CHANNEL_A:
		switch (Config_Ptr->State) {
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	88 23       	and	r24, r24
     dfa:	19 f0       	breq	.+6      	; 0xe02 <PWM_InitTimer1+0x108>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	d1 f0       	breq	.+52     	; 0xe34 <PWM_InitTimer1+0x13a>
     e00:	89 c0       	rjmp	.+274    	; 0xf14 <PWM_InitTimer1+0x21a>
			case PWM_NON_INVERTED: *(uint16_t*)TIMER1_CMP_A_REG_L = (uint16_t)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     e02:	28 85       	ldd	r18, Y+8	; 0x08
     e04:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gu16_PWM_TimerTopValue>
     e08:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
     e0c:	28 9f       	mul	r18, r24
     e0e:	b0 01       	movw	r22, r0
     e10:	29 9f       	mul	r18, r25
     e12:	70 0d       	add	r23, r0
     e14:	11 24       	eor	r1, r1
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	48 ec       	ldi	r20, 0xC8	; 200
     e24:	52 e4       	ldi	r21, 0x42	; 66
     e26:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     e2a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     e2e:	7b bd       	out	0x2b, r23	; 43
     e30:	6a bd       	out	0x2a, r22	; 42
     e32:	70 c0       	rjmp	.+224    	; 0xf14 <PWM_InitTimer1+0x21a>
			case PWM_INVERTED: *(uint16_t*)TIMER1_CMP_A_REG_L = (uint16_t)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     e34:	68 85       	ldd	r22, Y+8	; 0x08
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatsisf>
     e40:	9b 01       	movw	r18, r22
     e42:	ac 01       	movw	r20, r24
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	88 ec       	ldi	r24, 0xC8	; 200
     e4a:	92 e4       	ldi	r25, 0x42	; 66
     e4c:	0e 94 07 0a 	call	0x140e	; 0x140e <__subsf3>
     e50:	6b 01       	movw	r12, r22
     e52:	7c 01       	movw	r14, r24
     e54:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <gu16_PWM_TimerTopValue>
     e58:	70 91 ae 00 	lds	r23, 0x00AE	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	c7 01       	movw	r24, r14
     e6a:	b6 01       	movw	r22, r12
     e6c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	48 ec       	ldi	r20, 0xC8	; 200
     e76:	52 e4       	ldi	r21, 0x42	; 66
     e78:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     e7c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     e80:	7b bd       	out	0x2b, r23	; 43
     e82:	6a bd       	out	0x2a, r22	; 42
     e84:	47 c0       	rjmp	.+142    	; 0xf14 <PWM_InitTimer1+0x21a>
			default: break;
		}
		break;
		case PWM_TIMER_1_CHANNEL_B:
		switch (Config_Ptr->State) {
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	88 23       	and	r24, r24
     e8a:	19 f0       	breq	.+6      	; 0xe92 <PWM_InitTimer1+0x198>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	d1 f0       	breq	.+52     	; 0xec4 <PWM_InitTimer1+0x1ca>
     e90:	41 c0       	rjmp	.+130    	; 0xf14 <PWM_InitTimer1+0x21a>
			case PWM_NON_INVERTED: *(uint16_t*)TIMER1_CMP_B_REG_L = (uint16_t)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     e92:	28 85       	ldd	r18, Y+8	; 0x08
     e94:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gu16_PWM_TimerTopValue>
     e98:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
     e9c:	28 9f       	mul	r18, r24
     e9e:	b0 01       	movw	r22, r0
     ea0:	29 9f       	mul	r18, r25
     ea2:	70 0d       	add	r23, r0
     ea4:	11 24       	eor	r1, r1
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	48 ec       	ldi	r20, 0xC8	; 200
     eb4:	52 e4       	ldi	r21, 0x42	; 66
     eb6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     eba:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     ebe:	79 bd       	out	0x29, r23	; 41
     ec0:	68 bd       	out	0x28, r22	; 40
     ec2:	28 c0       	rjmp	.+80     	; 0xf14 <PWM_InitTimer1+0x21a>
			case PWM_INVERTED: *(uint16_t*)TIMER1_CMP_B_REG_L = (uint16_t)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     ec4:	68 85       	ldd	r22, Y+8	; 0x08
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatsisf>
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	88 ec       	ldi	r24, 0xC8	; 200
     eda:	92 e4       	ldi	r25, 0x42	; 66
     edc:	0e 94 07 0a 	call	0x140e	; 0x140e <__subsf3>
     ee0:	6b 01       	movw	r12, r22
     ee2:	7c 01       	movw	r14, r24
     ee4:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <gu16_PWM_TimerTopValue>
     ee8:	70 91 ae 00 	lds	r23, 0x00AE	; 0x8000ae <gu16_PWM_TimerTopValue+0x1>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     ef4:	9b 01       	movw	r18, r22
     ef6:	ac 01       	movw	r20, r24
     ef8:	c7 01       	movw	r24, r14
     efa:	b6 01       	movw	r22, r12
     efc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	48 ec       	ldi	r20, 0xC8	; 200
     f06:	52 e4       	ldi	r21, 0x42	; 66
     f08:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     f0c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     f10:	79 bd       	out	0x29, r23	; 41
     f12:	68 bd       	out	0x28, r22	; 40
		}
		break;
		default: break;
	}
	/* Clear TCNT1 Register Configuration */
	*(uint16_t*)TIMER1_CNTR_REG_L = 0x0000U;
     f14:	1d bc       	out	0x2d, r1	; 45
     f16:	1c bc       	out	0x2c, r1	; 44
}
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	08 95       	ret

00000f26 <PWM_InitTimer2>:

void PWM_InitTimer2(const PWM_ConfigurationType* Config_Ptr) {
     f26:	fc 01       	movw	r30, r24
	/* Make PD7=OC2 as output */
	// DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_7, DIO_OUTPUT);
	set_bit(*PORTD_DIR_REG, 7U);
     f28:	8f 9a       	sbi	0x11, 7	; 17
	/* Clear TCCR2 Register Configurations */
	*TIMER2_CTRL_REG = 0x00U;
     f2a:	15 bc       	out	0x25, r1	; 37
	/* Set PWM Mode */
	*TIMER2_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_2_FAST_BIT);
     f2c:	95 b5       	in	r25, 0x25	; 37
     f2e:	81 81       	ldd	r24, Z+1	; 0x01
     f30:	88 0f       	add	r24, r24
     f32:	88 0f       	add	r24, r24
     f34:	88 0f       	add	r24, r24
     f36:	90 64       	ori	r25, 0x40	; 64
     f38:	98 2b       	or	r25, r24
     f3a:	95 bd       	out	0x25, r25	; 37
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_2_INVERTING_BIT);
     f3c:	93 b7       	in	r25, 0x33	; 51
     f3e:	83 81       	ldd	r24, Z+3	; 0x03
     f40:	82 95       	swap	r24
     f42:	80 7f       	andi	r24, 0xF0	; 240
     f44:	90 62       	ori	r25, 0x20	; 32
     f46:	98 2b       	or	r25, r24
     f48:	93 bf       	out	0x33, r25	; 51
	/* Select Clock Source and Prescaler */
	if ((Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_FALLING_EDGE && (Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_RISING_EDGE) {
     f4a:	92 81       	ldd	r25, Z+2	; 0x02
     f4c:	88 ef       	ldi	r24, 0xF8	; 248
     f4e:	89 0f       	add	r24, r25
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	18 f0       	brcs	.+6      	; 0xf5a <PWM_InitTimer2+0x34>
		*TIMER2_CTRL_REG |= (Config_Ptr->Clk_Prescale);
     f54:	85 b5       	in	r24, 0x25	; 37
     f56:	89 2b       	or	r24, r25
     f58:	85 bd       	out	0x25, r24	; 37
	}
	/* Set Duty Value in OCR2 Register */
	*TIMER2_CMP_REG = 0x00U;
     f5a:	13 bc       	out	0x23, r1	; 35
	switch (Config_Ptr->State) {
     f5c:	83 81       	ldd	r24, Z+3	; 0x03
     f5e:	88 23       	and	r24, r24
     f60:	19 f0       	breq	.+6      	; 0xf68 <PWM_InitTimer2+0x42>
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	a1 f0       	breq	.+40     	; 0xf8e <PWM_InitTimer2+0x68>
     f66:	30 c0       	rjmp	.+96     	; 0xfc8 <PWM_InitTimer2+0xa2>
		case PWM_NON_INVERTED: *TIMER2_CMP_REG = (uint8_t)((Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
     f68:	60 85       	ldd	r22, Z+8	; 0x08
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	68 9f       	mul	r22, r24
     f6e:	b0 01       	movw	r22, r0
     f70:	11 24       	eor	r1, r1
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	48 ec       	ldi	r20, 0xC8	; 200
     f80:	52 e4       	ldi	r21, 0x42	; 66
     f82:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     f86:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     f8a:	63 bd       	out	0x23, r22	; 35
     f8c:	1d c0       	rjmp	.+58     	; 0xfc8 <PWM_InitTimer2+0xa2>
		case PWM_INVERTED: *TIMER2_CMP_REG = (uint8_t)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
     f8e:	60 85       	ldd	r22, Z+8	; 0x08
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatsisf>
     f9a:	9b 01       	movw	r18, r22
     f9c:	ac 01       	movw	r20, r24
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	88 ec       	ldi	r24, 0xC8	; 200
     fa4:	92 e4       	ldi	r25, 0x42	; 66
     fa6:	0e 94 07 0a 	call	0x140e	; 0x140e <__subsf3>
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	4f e7       	ldi	r20, 0x7F	; 127
     fb0:	53 e4       	ldi	r21, 0x43	; 67
     fb2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	48 ec       	ldi	r20, 0xC8	; 200
     fbc:	52 e4       	ldi	r21, 0x42	; 66
     fbe:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
     fc2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
     fc6:	63 bd       	out	0x23, r22	; 35
		default: break;
	}
	/* Clear TCNT2 Register Configurations */
	*TIMER2_CNTR_REG = 0x00U;
     fc8:	14 bc       	out	0x24, r1	; 36
     fca:	08 95       	ret

00000fcc <PWM_Init>:
void PWM_InitTimer2(const PWM_ConfigurationType* Config_Ptr);

/************************************************************************/
/*				Functions Implementations                               */
/************************************************************************/
void PWM_Init(const PWM_ConfigurationType* Config_Ptr) {
     fcc:	fc 01       	movw	r30, r24
	switch (Config_Ptr->Tmr_Channel) {
     fce:	90 81       	ld	r25, Z
     fd0:	93 30       	cpi	r25, 0x03	; 3
     fd2:	18 f4       	brcc	.+6      	; 0xfda <PWM_Init+0xe>
     fd4:	91 30       	cpi	r25, 0x01	; 1
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <PWM_Init+0x14>
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <PWM_Init+0x1c>
     fda:	93 30       	cpi	r25, 0x03	; 3
     fdc:	49 f0       	breq	.+18     	; 0xff0 <PWM_Init+0x24>
     fde:	08 95       	ret
		case PWM_TIMER_0_CHANNEL: PWM_InitTimer0(Config_Ptr); break;
     fe0:	cf 01       	movw	r24, r30
     fe2:	0e 94 1a 06 	call	0xc34	; 0xc34 <PWM_InitTimer0>
     fe6:	08 95       	ret
		case PWM_TIMER_1_CHANNEL_A:
		case PWM_TIMER_1_CHANNEL_B: PWM_InitTimer1(Config_Ptr); break;
     fe8:	cf 01       	movw	r24, r30
     fea:	0e 94 7d 06 	call	0xcfa	; 0xcfa <PWM_InitTimer1>
     fee:	08 95       	ret
		case PWM_TIMER_2_CHANNEL: PWM_InitTimer2(Config_Ptr); break;
     ff0:	cf 01       	movw	r24, r30
     ff2:	0e 94 93 07 	call	0xf26	; 0xf26 <PWM_InitTimer2>
     ff6:	08 95       	ret

00000ff8 <PWMDrawer_Init>:
	{0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00}
};

void PWMDrawer_Init(void) {
	#if GENERATE_PWM_FROM_SAME_MCU == 1
	GLCD_Init();
     ff8:	0e 94 29 01 	call	0x252	; 0x252 <GLCD_Init>
	GLCD_ClearDisplay();
     ffc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <GLCD_ClearDisplay>
	PWM_Init(&gaStrPWM_Config[0]);		/* Timer 0 on OC0=PB3 */
    1000:	8b e9       	ldi	r24, 0x9B	; 155
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 e6 07 	call	0xfcc	; 0xfcc <PWM_Init>
	ICU_Init(&gStrICU_Config);			/* Timer 1 is used for Input Capture */
    1008:	87 e9       	ldi	r24, 0x97	; 151
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 6a 05 	call	0xad4	; 0xad4 <ICU_Init>
    1010:	08 95       	ret

00001012 <PWMDrawer_MeasureSignal>:
	#else
	PWM_Init(&gaStrPWM_Config[0]);		/* Timer 0 on OC0=PB3 */
	#endif
}

void PWMDrawer_MeasureSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr) {
    1012:	8f 92       	push	r8
    1014:	9f 92       	push	r9
    1016:	af 92       	push	r10
    1018:	bf 92       	push	r11
    101a:	cf 92       	push	r12
    101c:	df 92       	push	r13
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	28 97       	sbiw	r28, 0x08	; 8
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	8c 01       	movw	r16, r24
	ICU_DutyCycleType strLocal_Duty = {0, 0};
    103c:	19 82       	std	Y+1, r1	; 0x01
    103e:	1a 82       	std	Y+2, r1	; 0x02
    1040:	1b 82       	std	Y+3, r1	; 0x03
    1042:	1c 82       	std	Y+4, r1	; 0x04
    1044:	1d 82       	std	Y+5, r1	; 0x05
    1046:	1e 82       	std	Y+6, r1	; 0x06
    1048:	1f 82       	std	Y+7, r1	; 0x07
    104a:	18 86       	std	Y+8, r1	; 0x08
	ICU_GetDutyCycle(ICU_TIMER_1, 8U, &strLocal_Duty);
    104c:	ae 01       	movw	r20, r28
    104e:	4f 5f       	subi	r20, 0xFF	; 255
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	68 e0       	ldi	r22, 0x08	; 8
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 13 06 	call	0xc26	; 0xc26 <ICU_GetDutyCycle>
	Signal_Data_Ptr->Period_Time_ms = strLocal_Duty.Period_Time;
    105c:	cd 80       	ldd	r12, Y+5	; 0x05
    105e:	de 80       	ldd	r13, Y+6	; 0x06
    1060:	ef 80       	ldd	r14, Y+7	; 0x07
    1062:	f8 84       	ldd	r15, Y+8	; 0x08
    1064:	f8 01       	movw	r30, r16
    1066:	c1 86       	std	Z+9, r12	; 0x09
    1068:	d2 86       	std	Z+10, r13	; 0x0a
    106a:	e3 86       	std	Z+11, r14	; 0x0b
    106c:	f4 86       	std	Z+12, r15	; 0x0c
	Signal_Data_Ptr->High_Time_ms = strLocal_Duty.High_Time;
    106e:	89 80       	ldd	r8, Y+1	; 0x01
    1070:	9a 80       	ldd	r9, Y+2	; 0x02
    1072:	ab 80       	ldd	r10, Y+3	; 0x03
    1074:	bc 80       	ldd	r11, Y+4	; 0x04
    1076:	81 82       	std	Z+1, r8	; 0x01
    1078:	92 82       	std	Z+2, r9	; 0x02
    107a:	a3 82       	std	Z+3, r10	; 0x03
    107c:	b4 82       	std	Z+4, r11	; 0x04
	Signal_Data_Ptr->Low_Time_ms = strLocal_Duty.Period_Time - strLocal_Duty.High_Time;
    107e:	a5 01       	movw	r20, r10
    1080:	94 01       	movw	r18, r8
    1082:	c7 01       	movw	r24, r14
    1084:	b6 01       	movw	r22, r12
    1086:	0e 94 07 0a 	call	0x140e	; 0x140e <__subsf3>
    108a:	f8 01       	movw	r30, r16
    108c:	65 83       	std	Z+5, r22	; 0x05
    108e:	76 83       	std	Z+6, r23	; 0x06
    1090:	87 83       	std	Z+7, r24	; 0x07
    1092:	90 87       	std	Z+8, r25	; 0x08
	
	Signal_Data_Ptr->Freq_kHz = (1.0 / (Signal_Data_Ptr->Period_Time_ms));
    1094:	a7 01       	movw	r20, r14
    1096:	96 01       	movw	r18, r12
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e8       	ldi	r24, 0x80	; 128
    109e:	9f e3       	ldi	r25, 0x3F	; 63
    10a0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    10a4:	f8 01       	movw	r30, r16
    10a6:	65 87       	std	Z+13, r22	; 0x0d
    10a8:	76 87       	std	Z+14, r23	; 0x0e
    10aa:	87 87       	std	Z+15, r24	; 0x0f
    10ac:	90 8b       	std	Z+16, r25	; 0x10
	Signal_Data_Ptr->Duty_Percent = (uint8_t)((Signal_Data_Ptr->High_Time_ms) * 100.0 / (Signal_Data_Ptr->Period_Time_ms));
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	48 ec       	ldi	r20, 0xC8	; 200
    10b4:	52 e4       	ldi	r21, 0x42	; 66
    10b6:	c5 01       	movw	r24, r10
    10b8:	b4 01       	movw	r22, r8
    10ba:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__mulsf3>
    10be:	a7 01       	movw	r20, r14
    10c0:	96 01       	movw	r18, r12
    10c2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    10c6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    10ca:	f8 01       	movw	r30, r16
    10cc:	60 83       	st	Z, r22
}
    10ce:	28 96       	adiw	r28, 0x08	; 8
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	df 90       	pop	r13
    10e8:	cf 90       	pop	r12
    10ea:	bf 90       	pop	r11
    10ec:	af 90       	pop	r10
    10ee:	9f 90       	pop	r9
    10f0:	8f 90       	pop	r8
    10f2:	08 95       	ret

000010f4 <PWMDrawer_DrawSignal>:

void PWMDrawer_DrawSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr, fint32_t Scale_ms) {
    10f4:	8f 92       	push	r8
    10f6:	9f 92       	push	r9
    10f8:	af 92       	push	r10
    10fa:	bf 92       	push	r11
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	ec 97       	sbiw	r28, 0x3c	; 60
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	7c 01       	movw	r14, r24
    111a:	4a 01       	movw	r8, r20
    111c:	5b 01       	movw	r10, r22
	GLCD_ClearDisplay();
    111e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <GLCD_ClearDisplay>
	/* Display Signal Data (Frequency and Duty) Values */
	GLCD_GoToLine(0);
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 3f 04 	call	0x87e	; 0x87e <GLCD_GoToLine>
	char txt1[15] = "Frequency=\0";
    1128:	8c e0       	ldi	r24, 0x0C	; 12
    112a:	e0 e6       	ldi	r30, 0x60	; 96
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	de 01       	movw	r26, r28
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	01 90       	ld	r0, Z+
    1134:	0d 92       	st	X+, r0
    1136:	8a 95       	dec	r24
    1138:	e1 f7       	brne	.-8      	; 0x1132 <PWMDrawer_DrawSignal+0x3e>
    113a:	fe 01       	movw	r30, r28
    113c:	3d 96       	adiw	r30, 0x0d	; 13
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	df 01       	movw	r26, r30
    1142:	1d 92       	st	X+, r1
    1144:	8a 95       	dec	r24
    1146:	e9 f7       	brne	.-6      	; 0x1142 <PWMDrawer_DrawSignal+0x4e>
	GLCD_DisplayString(txt1);
    1148:	ce 01       	movw	r24, r28
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	0e 94 82 03 	call	0x704	; 0x704 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Freq_kHz);
    1150:	f7 01       	movw	r30, r14
    1152:	65 85       	ldd	r22, Z+13	; 0x0d
    1154:	76 85       	ldd	r23, Z+14	; 0x0e
    1156:	87 85       	ldd	r24, Z+15	; 0x0f
    1158:	90 89       	ldd	r25, Z+16	; 0x10
    115a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <GLCD_DisplayFloatingPoint>
	char txt2[5] = " kHz\0";
    115e:	85 e0       	ldi	r24, 0x05	; 5
    1160:	e4 ea       	ldi	r30, 0xA4	; 164
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	de 01       	movw	r26, r28
    1166:	50 96       	adiw	r26, 0x10	; 16
    1168:	01 90       	ld	r0, Z+
    116a:	0d 92       	st	X+, r0
    116c:	8a 95       	dec	r24
    116e:	e1 f7       	brne	.-8      	; 0x1168 <PWMDrawer_DrawSignal+0x74>
	GLCD_DisplayString(txt2);
    1170:	ce 01       	movw	r24, r28
    1172:	40 96       	adiw	r24, 0x10	; 16
    1174:	0e 94 82 03 	call	0x704	; 0x704 <GLCD_DisplayString>

	GLCD_GoToLine(1);
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	0e 94 3f 04 	call	0x87e	; 0x87e <GLCD_GoToLine>
	char txt3[15] = "Duty=\0";
    117e:	87 e0       	ldi	r24, 0x07	; 7
    1180:	ef e6       	ldi	r30, 0x6F	; 111
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	de 01       	movw	r26, r28
    1186:	55 96       	adiw	r26, 0x15	; 21
    1188:	01 90       	ld	r0, Z+
    118a:	0d 92       	st	X+, r0
    118c:	8a 95       	dec	r24
    118e:	e1 f7       	brne	.-8      	; 0x1188 <PWMDrawer_DrawSignal+0x94>
    1190:	fe 01       	movw	r30, r28
    1192:	7c 96       	adiw	r30, 0x1c	; 28
    1194:	88 e0       	ldi	r24, 0x08	; 8
    1196:	df 01       	movw	r26, r30
    1198:	1d 92       	st	X+, r1
    119a:	8a 95       	dec	r24
    119c:	e9 f7       	brne	.-6      	; 0x1198 <PWMDrawer_DrawSignal+0xa4>
	GLCD_DisplayString(txt3);
    119e:	ce 01       	movw	r24, r28
    11a0:	45 96       	adiw	r24, 0x15	; 21
    11a2:	0e 94 82 03 	call	0x704	; 0x704 <GLCD_DisplayString>
	GLCD_DisplayInteger(Signal_Data_Ptr->Duty_Percent);
    11a6:	f7 01       	movw	r30, r14
    11a8:	60 81       	ld	r22, Z
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 91 03 	call	0x722	; 0x722 <GLCD_DisplayInteger>
	char txt4[5] = " %\0";
    11b4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
    11b8:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
    11bc:	9d a3       	std	Y+37, r25	; 0x25
    11be:	8c a3       	std	Y+36, r24	; 0x24
    11c0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    11c4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    11c8:	9f a3       	std	Y+39, r25	; 0x27
    11ca:	8e a3       	std	Y+38, r24	; 0x26
    11cc:	18 a6       	std	Y+40, r1	; 0x28
	GLCD_DisplayString(txt4);
    11ce:	ce 01       	movw	r24, r28
    11d0:	84 96       	adiw	r24, 0x24	; 36
    11d2:	0e 94 82 03 	call	0x704	; 0x704 <GLCD_DisplayString>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
    11d6:	86 e0       	ldi	r24, 0x06	; 6
    11d8:	0e 94 3f 04 	call	0x87e	; 0x87e <GLCD_GoToLine>
	uint8_t pixel_width_count = 0;
    11dc:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
    11de:	20 e4       	ldi	r18, 0x40	; 64
    11e0:	30 e4       	ldi	r19, 0x40	; 64
    11e2:	4e e7       	ldi	r20, 0x7E	; 126
    11e4:	52 e0       	ldi	r21, 0x02	; 2
    11e6:	62 e0       	ldi	r22, 0x02	; 2
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
    11f2:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    11f4:	a5 01       	movw	r20, r10
    11f6:	94 01       	movw	r18, r8
    11f8:	d7 01       	movw	r26, r14
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	6d 91       	ld	r22, X+
    11fe:	7d 91       	ld	r23, X+
    1200:	8d 91       	ld	r24, X+
    1202:	9c 91       	ld	r25, X
    1204:	14 97       	sbiw	r26, 0x04	; 4
    1206:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    120a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    120e:	66 23       	and	r22, r22
    1210:	d1 f0       	breq	.+52     	; 0x1246 <PWMDrawer_DrawSignal+0x152>
    1212:	00 e0       	ldi	r16, 0x00	; 0
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
    1214:	22 e0       	ldi	r18, 0x02	; 2
    1216:	32 e0       	ldi	r19, 0x02	; 2
    1218:	42 e0       	ldi	r20, 0x02	; 2
    121a:	52 e0       	ldi	r21, 0x02	; 2
    121c:	62 e0       	ldi	r22, 0x02	; 2
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
    1228:	1b 5f       	subi	r17, 0xFB	; 251
	GLCD_GoToLine(6);
	uint8_t pixel_width_count = 0;
	uint8_t i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    122a:	0f 5f       	subi	r16, 0xFF	; 255
    122c:	a5 01       	movw	r20, r10
    122e:	94 01       	movw	r18, r8
    1230:	f7 01       	movw	r30, r14
    1232:	61 81       	ldd	r22, Z+1	; 0x01
    1234:	72 81       	ldd	r23, Z+2	; 0x02
    1236:	83 81       	ldd	r24, Z+3	; 0x03
    1238:	94 81       	ldd	r25, Z+4	; 0x04
    123a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    123e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    1242:	06 17       	cp	r16, r22
    1244:	38 f3       	brcs	.-50     	; 0x1214 <PWMDrawer_DrawSignal+0x120>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
    1246:	22 e0       	ldi	r18, 0x02	; 2
    1248:	32 e0       	ldi	r19, 0x02	; 2
    124a:	4e e7       	ldi	r20, 0x7E	; 126
    124c:	50 e4       	ldi	r21, 0x40	; 64
    124e:	60 e4       	ldi	r22, 0x40	; 64
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
    125a:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    125c:	a5 01       	movw	r20, r10
    125e:	94 01       	movw	r18, r8
    1260:	d7 01       	movw	r26, r14
    1262:	15 96       	adiw	r26, 0x05	; 5
    1264:	6d 91       	ld	r22, X+
    1266:	7d 91       	ld	r23, X+
    1268:	8d 91       	ld	r24, X+
    126a:	9c 91       	ld	r25, X
    126c:	18 97       	sbiw	r26, 0x08	; 8
    126e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    1272:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    1276:	66 23       	and	r22, r22
    1278:	d1 f0       	breq	.+52     	; 0x12ae <PWMDrawer_DrawSignal+0x1ba>
    127a:	00 e0       	ldi	r16, 0x00	; 0
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
    127c:	20 e4       	ldi	r18, 0x40	; 64
    127e:	30 e4       	ldi	r19, 0x40	; 64
    1280:	40 e4       	ldi	r20, 0x40	; 64
    1282:	50 e4       	ldi	r21, 0x40	; 64
    1284:	60 e4       	ldi	r22, 0x40	; 64
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
    1290:	1b 5f       	subi	r17, 0xFB	; 251
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    1292:	0f 5f       	subi	r16, 0xFF	; 255
    1294:	a5 01       	movw	r20, r10
    1296:	94 01       	movw	r18, r8
    1298:	f7 01       	movw	r30, r14
    129a:	65 81       	ldd	r22, Z+5	; 0x05
    129c:	76 81       	ldd	r23, Z+6	; 0x06
    129e:	87 81       	ldd	r24, Z+7	; 0x07
    12a0:	90 85       	ldd	r25, Z+8	; 0x08
    12a2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    12a6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    12aa:	06 17       	cp	r16, r22
    12ac:	38 f3       	brcs	.-50     	; 0x127c <PWMDrawer_DrawSignal+0x188>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
	uint8_t pixel_width_count = 0;
	uint8_t i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
    12ae:	18 37       	cpi	r17, 0x78	; 120
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <PWMDrawer_DrawSignal+0x1c0>
    12b2:	95 cf       	rjmp	.-214    	; 0x11de <PWMDrawer_DrawSignal+0xea>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
		}
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
    12b4:	85 e0       	ldi	r24, 0x05	; 5
    12b6:	0e 94 3f 04 	call	0x87e	; 0x87e <GLCD_GoToLine>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3e e3       	ldi	r19, 0x3E	; 62
    12be:	48 e0       	ldi	r20, 0x08	; 8
    12c0:	5c e1       	ldi	r21, 0x1C	; 28
    12c2:	6a e2       	ldi	r22, 0x2A	; 42
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    12ce:	a5 01       	movw	r20, r10
    12d0:	94 01       	movw	r18, r8
    12d2:	d7 01       	movw	r26, r14
    12d4:	11 96       	adiw	r26, 0x01	; 1
    12d6:	6d 91       	ld	r22, X+
    12d8:	7d 91       	ld	r23, X+
    12da:	8d 91       	ld	r24, X+
    12dc:	9c 91       	ld	r25, X
    12de:	14 97       	sbiw	r26, 0x04	; 4
    12e0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    12e4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    12e8:	66 23       	and	r22, r22
    12ea:	c9 f0       	breq	.+50     	; 0x131e <PWMDrawer_DrawSignal+0x22a>
    12ec:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    12ee:	28 e0       	ldi	r18, 0x08	; 8
    12f0:	38 e0       	ldi	r19, 0x08	; 8
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	58 e0       	ldi	r21, 0x08	; 8
    12f6:	68 e0       	ldi	r22, 0x08	; 8
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    1302:	1f 5f       	subi	r17, 0xFF	; 255
    1304:	a5 01       	movw	r20, r10
    1306:	94 01       	movw	r18, r8
    1308:	f7 01       	movw	r30, r14
    130a:	61 81       	ldd	r22, Z+1	; 0x01
    130c:	72 81       	ldd	r23, Z+2	; 0x02
    130e:	83 81       	ldd	r24, Z+3	; 0x03
    1310:	94 81       	ldd	r25, Z+4	; 0x04
    1312:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    1316:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    131a:	16 17       	cp	r17, r22
    131c:	40 f3       	brcs	.-48     	; 0x12ee <PWMDrawer_DrawSignal+0x1fa>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    131e:	28 e0       	ldi	r18, 0x08	; 8
    1320:	38 e0       	ldi	r19, 0x08	; 8
    1322:	48 e0       	ldi	r20, 0x08	; 8
    1324:	58 e0       	ldi	r21, 0x08	; 8
    1326:	68 e0       	ldi	r22, 0x08	; 8
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    1332:	a5 01       	movw	r20, r10
    1334:	94 01       	movw	r18, r8
    1336:	d7 01       	movw	r26, r14
    1338:	15 96       	adiw	r26, 0x05	; 5
    133a:	6d 91       	ld	r22, X+
    133c:	7d 91       	ld	r23, X+
    133e:	8d 91       	ld	r24, X+
    1340:	9c 91       	ld	r25, X
    1342:	18 97       	sbiw	r26, 0x08	; 8
    1344:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    1348:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    134c:	66 23       	and	r22, r22
    134e:	c9 f0       	breq	.+50     	; 0x1382 <PWMDrawer_DrawSignal+0x28e>
    1350:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    1352:	28 e0       	ldi	r18, 0x08	; 8
    1354:	38 e0       	ldi	r19, 0x08	; 8
    1356:	48 e0       	ldi	r20, 0x08	; 8
    1358:	58 e0       	ldi	r21, 0x08	; 8
    135a:	68 e0       	ldi	r22, 0x08	; 8
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (i = 0; i < ((uint8_t)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    1366:	1f 5f       	subi	r17, 0xFF	; 255
    1368:	a5 01       	movw	r20, r10
    136a:	94 01       	movw	r18, r8
    136c:	f7 01       	movw	r30, r14
    136e:	65 81       	ldd	r22, Z+5	; 0x05
    1370:	76 81       	ldd	r23, Z+6	; 0x06
    1372:	87 81       	ldd	r24, Z+7	; 0x07
    1374:	90 85       	ldd	r25, Z+8	; 0x08
    1376:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divsf3>
    137a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    137e:	16 17       	cp	r17, r22
    1380:	40 f3       	brcs	.-48     	; 0x1352 <PWMDrawer_DrawSignal+0x25e>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
    1382:	2a e2       	ldi	r18, 0x2A	; 42
    1384:	3c e1       	ldi	r19, 0x1C	; 28
    1386:	48 e0       	ldi	r20, 0x08	; 8
    1388:	5e e3       	ldi	r21, 0x3E	; 62
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_DisplaySpecialPattern>

	/* Display Time Period Value */
	GLCD_GoToLine(4);
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	0e 94 3f 04 	call	0x87e	; 0x87e <GLCD_GoToLine>
	char txt5[15] = " Time=\0";
    139c:	88 e0       	ldi	r24, 0x08	; 8
    139e:	e3 e8       	ldi	r30, 0x83	; 131
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	de 01       	movw	r26, r28
    13a4:	99 96       	adiw	r26, 0x29	; 41
    13a6:	01 90       	ld	r0, Z+
    13a8:	0d 92       	st	X+, r0
    13aa:	8a 95       	dec	r24
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <PWMDrawer_DrawSignal+0x2b2>
    13ae:	fe 01       	movw	r30, r28
    13b0:	f1 96       	adiw	r30, 0x31	; 49
    13b2:	87 e0       	ldi	r24, 0x07	; 7
    13b4:	df 01       	movw	r26, r30
    13b6:	1d 92       	st	X+, r1
    13b8:	8a 95       	dec	r24
    13ba:	e9 f7       	brne	.-6      	; 0x13b6 <PWMDrawer_DrawSignal+0x2c2>
	GLCD_DisplayString(txt5);
    13bc:	ce 01       	movw	r24, r28
    13be:	89 96       	adiw	r24, 0x29	; 41
    13c0:	0e 94 82 03 	call	0x704	; 0x704 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Period_Time_ms);
    13c4:	f7 01       	movw	r30, r14
    13c6:	61 85       	ldd	r22, Z+9	; 0x09
    13c8:	72 85       	ldd	r23, Z+10	; 0x0a
    13ca:	83 85       	ldd	r24, Z+11	; 0x0b
    13cc:	94 85       	ldd	r25, Z+12	; 0x0c
    13ce:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <GLCD_DisplayFloatingPoint>
	char txt6[5] = " ms\0";
    13d2:	85 e0       	ldi	r24, 0x05	; 5
    13d4:	e2 e9       	ldi	r30, 0x92	; 146
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	de 01       	movw	r26, r28
    13da:	d8 96       	adiw	r26, 0x38	; 56
    13dc:	01 90       	ld	r0, Z+
    13de:	0d 92       	st	X+, r0
    13e0:	8a 95       	dec	r24
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <PWMDrawer_DrawSignal+0x2e8>
	GLCD_DisplayString(txt6);
    13e4:	ce 01       	movw	r24, r28
    13e6:	c8 96       	adiw	r24, 0x38	; 56
    13e8:	0e 94 82 03 	call	0x704	; 0x704 <GLCD_DisplayString>
    13ec:	ec 96       	adiw	r28, 0x3c	; 60
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	08 95       	ret

0000140e <__subsf3>:
    140e:	50 58       	subi	r21, 0x80	; 128

00001410 <__addsf3>:
    1410:	bb 27       	eor	r27, r27
    1412:	aa 27       	eor	r26, r26
    1414:	0e 94 1f 0a 	call	0x143e	; 0x143e <__addsf3x>
    1418:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_round>
    141c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__fp_pscA>
    1420:	38 f0       	brcs	.+14     	; 0x1430 <__addsf3+0x20>
    1422:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__fp_pscB>
    1426:	20 f0       	brcs	.+8      	; 0x1430 <__addsf3+0x20>
    1428:	39 f4       	brne	.+14     	; 0x1438 <__addsf3+0x28>
    142a:	9f 3f       	cpi	r25, 0xFF	; 255
    142c:	19 f4       	brne	.+6      	; 0x1434 <__addsf3+0x24>
    142e:	26 f4       	brtc	.+8      	; 0x1438 <__addsf3+0x28>
    1430:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__fp_nan>
    1434:	0e f4       	brtc	.+2      	; 0x1438 <__addsf3+0x28>
    1436:	e0 95       	com	r30
    1438:	e7 fb       	bst	r30, 7
    143a:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_inf>

0000143e <__addsf3x>:
    143e:	e9 2f       	mov	r30, r25
    1440:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__fp_split3>
    1444:	58 f3       	brcs	.-42     	; 0x141c <__addsf3+0xc>
    1446:	ba 17       	cp	r27, r26
    1448:	62 07       	cpc	r22, r18
    144a:	73 07       	cpc	r23, r19
    144c:	84 07       	cpc	r24, r20
    144e:	95 07       	cpc	r25, r21
    1450:	20 f0       	brcs	.+8      	; 0x145a <__addsf3x+0x1c>
    1452:	79 f4       	brne	.+30     	; 0x1472 <__addsf3x+0x34>
    1454:	a6 f5       	brtc	.+104    	; 0x14be <__addsf3x+0x80>
    1456:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <__fp_zero>
    145a:	0e f4       	brtc	.+2      	; 0x145e <__addsf3x+0x20>
    145c:	e0 95       	com	r30
    145e:	0b 2e       	mov	r0, r27
    1460:	ba 2f       	mov	r27, r26
    1462:	a0 2d       	mov	r26, r0
    1464:	0b 01       	movw	r0, r22
    1466:	b9 01       	movw	r22, r18
    1468:	90 01       	movw	r18, r0
    146a:	0c 01       	movw	r0, r24
    146c:	ca 01       	movw	r24, r20
    146e:	a0 01       	movw	r20, r0
    1470:	11 24       	eor	r1, r1
    1472:	ff 27       	eor	r31, r31
    1474:	59 1b       	sub	r21, r25
    1476:	99 f0       	breq	.+38     	; 0x149e <__addsf3x+0x60>
    1478:	59 3f       	cpi	r21, 0xF9	; 249
    147a:	50 f4       	brcc	.+20     	; 0x1490 <__addsf3x+0x52>
    147c:	50 3e       	cpi	r21, 0xE0	; 224
    147e:	68 f1       	brcs	.+90     	; 0x14da <__addsf3x+0x9c>
    1480:	1a 16       	cp	r1, r26
    1482:	f0 40       	sbci	r31, 0x00	; 0
    1484:	a2 2f       	mov	r26, r18
    1486:	23 2f       	mov	r18, r19
    1488:	34 2f       	mov	r19, r20
    148a:	44 27       	eor	r20, r20
    148c:	58 5f       	subi	r21, 0xF8	; 248
    148e:	f3 cf       	rjmp	.-26     	; 0x1476 <__addsf3x+0x38>
    1490:	46 95       	lsr	r20
    1492:	37 95       	ror	r19
    1494:	27 95       	ror	r18
    1496:	a7 95       	ror	r26
    1498:	f0 40       	sbci	r31, 0x00	; 0
    149a:	53 95       	inc	r21
    149c:	c9 f7       	brne	.-14     	; 0x1490 <__addsf3x+0x52>
    149e:	7e f4       	brtc	.+30     	; 0x14be <__addsf3x+0x80>
    14a0:	1f 16       	cp	r1, r31
    14a2:	ba 0b       	sbc	r27, r26
    14a4:	62 0b       	sbc	r22, r18
    14a6:	73 0b       	sbc	r23, r19
    14a8:	84 0b       	sbc	r24, r20
    14aa:	ba f0       	brmi	.+46     	; 0x14da <__addsf3x+0x9c>
    14ac:	91 50       	subi	r25, 0x01	; 1
    14ae:	a1 f0       	breq	.+40     	; 0x14d8 <__addsf3x+0x9a>
    14b0:	ff 0f       	add	r31, r31
    14b2:	bb 1f       	adc	r27, r27
    14b4:	66 1f       	adc	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	c2 f7       	brpl	.-16     	; 0x14ac <__addsf3x+0x6e>
    14bc:	0e c0       	rjmp	.+28     	; 0x14da <__addsf3x+0x9c>
    14be:	ba 0f       	add	r27, r26
    14c0:	62 1f       	adc	r22, r18
    14c2:	73 1f       	adc	r23, r19
    14c4:	84 1f       	adc	r24, r20
    14c6:	48 f4       	brcc	.+18     	; 0x14da <__addsf3x+0x9c>
    14c8:	87 95       	ror	r24
    14ca:	77 95       	ror	r23
    14cc:	67 95       	ror	r22
    14ce:	b7 95       	ror	r27
    14d0:	f7 95       	ror	r31
    14d2:	9e 3f       	cpi	r25, 0xFE	; 254
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <__addsf3x+0x9a>
    14d6:	b0 cf       	rjmp	.-160    	; 0x1438 <__addsf3+0x28>
    14d8:	93 95       	inc	r25
    14da:	88 0f       	add	r24, r24
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <__addsf3x+0xa2>
    14de:	99 27       	eor	r25, r25
    14e0:	ee 0f       	add	r30, r30
    14e2:	97 95       	ror	r25
    14e4:	87 95       	ror	r24
    14e6:	08 95       	ret

000014e8 <__divsf3>:
    14e8:	0e 94 88 0a 	call	0x1510	; 0x1510 <__divsf3x>
    14ec:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_round>
    14f0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__fp_pscB>
    14f4:	58 f0       	brcs	.+22     	; 0x150c <__divsf3+0x24>
    14f6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__fp_pscA>
    14fa:	40 f0       	brcs	.+16     	; 0x150c <__divsf3+0x24>
    14fc:	29 f4       	brne	.+10     	; 0x1508 <__divsf3+0x20>
    14fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1500:	29 f0       	breq	.+10     	; 0x150c <__divsf3+0x24>
    1502:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_inf>
    1506:	51 11       	cpse	r21, r1
    1508:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_szero>
    150c:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__fp_nan>

00001510 <__divsf3x>:
    1510:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__fp_split3>
    1514:	68 f3       	brcs	.-38     	; 0x14f0 <__divsf3+0x8>

00001516 <__divsf3_pse>:
    1516:	99 23       	and	r25, r25
    1518:	b1 f3       	breq	.-20     	; 0x1506 <__divsf3+0x1e>
    151a:	55 23       	and	r21, r21
    151c:	91 f3       	breq	.-28     	; 0x1502 <__divsf3+0x1a>
    151e:	95 1b       	sub	r25, r21
    1520:	55 0b       	sbc	r21, r21
    1522:	bb 27       	eor	r27, r27
    1524:	aa 27       	eor	r26, r26
    1526:	62 17       	cp	r22, r18
    1528:	73 07       	cpc	r23, r19
    152a:	84 07       	cpc	r24, r20
    152c:	38 f0       	brcs	.+14     	; 0x153c <__divsf3_pse+0x26>
    152e:	9f 5f       	subi	r25, 0xFF	; 255
    1530:	5f 4f       	sbci	r21, 0xFF	; 255
    1532:	22 0f       	add	r18, r18
    1534:	33 1f       	adc	r19, r19
    1536:	44 1f       	adc	r20, r20
    1538:	aa 1f       	adc	r26, r26
    153a:	a9 f3       	breq	.-22     	; 0x1526 <__divsf3_pse+0x10>
    153c:	35 d0       	rcall	.+106    	; 0x15a8 <__divsf3_pse+0x92>
    153e:	0e 2e       	mov	r0, r30
    1540:	3a f0       	brmi	.+14     	; 0x1550 <__divsf3_pse+0x3a>
    1542:	e0 e8       	ldi	r30, 0x80	; 128
    1544:	32 d0       	rcall	.+100    	; 0x15aa <__divsf3_pse+0x94>
    1546:	91 50       	subi	r25, 0x01	; 1
    1548:	50 40       	sbci	r21, 0x00	; 0
    154a:	e6 95       	lsr	r30
    154c:	00 1c       	adc	r0, r0
    154e:	ca f7       	brpl	.-14     	; 0x1542 <__divsf3_pse+0x2c>
    1550:	2b d0       	rcall	.+86     	; 0x15a8 <__divsf3_pse+0x92>
    1552:	fe 2f       	mov	r31, r30
    1554:	29 d0       	rcall	.+82     	; 0x15a8 <__divsf3_pse+0x92>
    1556:	66 0f       	add	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	88 1f       	adc	r24, r24
    155c:	bb 1f       	adc	r27, r27
    155e:	26 17       	cp	r18, r22
    1560:	37 07       	cpc	r19, r23
    1562:	48 07       	cpc	r20, r24
    1564:	ab 07       	cpc	r26, r27
    1566:	b0 e8       	ldi	r27, 0x80	; 128
    1568:	09 f0       	breq	.+2      	; 0x156c <__divsf3_pse+0x56>
    156a:	bb 0b       	sbc	r27, r27
    156c:	80 2d       	mov	r24, r0
    156e:	bf 01       	movw	r22, r30
    1570:	ff 27       	eor	r31, r31
    1572:	93 58       	subi	r25, 0x83	; 131
    1574:	5f 4f       	sbci	r21, 0xFF	; 255
    1576:	3a f0       	brmi	.+14     	; 0x1586 <__divsf3_pse+0x70>
    1578:	9e 3f       	cpi	r25, 0xFE	; 254
    157a:	51 05       	cpc	r21, r1
    157c:	78 f0       	brcs	.+30     	; 0x159c <__divsf3_pse+0x86>
    157e:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_inf>
    1582:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_szero>
    1586:	5f 3f       	cpi	r21, 0xFF	; 255
    1588:	e4 f3       	brlt	.-8      	; 0x1582 <__divsf3_pse+0x6c>
    158a:	98 3e       	cpi	r25, 0xE8	; 232
    158c:	d4 f3       	brlt	.-12     	; 0x1582 <__divsf3_pse+0x6c>
    158e:	86 95       	lsr	r24
    1590:	77 95       	ror	r23
    1592:	67 95       	ror	r22
    1594:	b7 95       	ror	r27
    1596:	f7 95       	ror	r31
    1598:	9f 5f       	subi	r25, 0xFF	; 255
    159a:	c9 f7       	brne	.-14     	; 0x158e <__divsf3_pse+0x78>
    159c:	88 0f       	add	r24, r24
    159e:	91 1d       	adc	r25, r1
    15a0:	96 95       	lsr	r25
    15a2:	87 95       	ror	r24
    15a4:	97 f9       	bld	r25, 7
    15a6:	08 95       	ret
    15a8:	e1 e0       	ldi	r30, 0x01	; 1
    15aa:	66 0f       	add	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	88 1f       	adc	r24, r24
    15b0:	bb 1f       	adc	r27, r27
    15b2:	62 17       	cp	r22, r18
    15b4:	73 07       	cpc	r23, r19
    15b6:	84 07       	cpc	r24, r20
    15b8:	ba 07       	cpc	r27, r26
    15ba:	20 f0       	brcs	.+8      	; 0x15c4 <__divsf3_pse+0xae>
    15bc:	62 1b       	sub	r22, r18
    15be:	73 0b       	sbc	r23, r19
    15c0:	84 0b       	sbc	r24, r20
    15c2:	ba 0b       	sbc	r27, r26
    15c4:	ee 1f       	adc	r30, r30
    15c6:	88 f7       	brcc	.-30     	; 0x15aa <__divsf3_pse+0x94>
    15c8:	e0 95       	com	r30
    15ca:	08 95       	ret

000015cc <__fixunssfsi>:
    15cc:	0e 94 82 0b 	call	0x1704	; 0x1704 <__fp_splitA>
    15d0:	88 f0       	brcs	.+34     	; 0x15f4 <__fixunssfsi+0x28>
    15d2:	9f 57       	subi	r25, 0x7F	; 127
    15d4:	98 f0       	brcs	.+38     	; 0x15fc <__fixunssfsi+0x30>
    15d6:	b9 2f       	mov	r27, r25
    15d8:	99 27       	eor	r25, r25
    15da:	b7 51       	subi	r27, 0x17	; 23
    15dc:	b0 f0       	brcs	.+44     	; 0x160a <__fixunssfsi+0x3e>
    15de:	e1 f0       	breq	.+56     	; 0x1618 <__fixunssfsi+0x4c>
    15e0:	66 0f       	add	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	1a f0       	brmi	.+6      	; 0x15f0 <__fixunssfsi+0x24>
    15ea:	ba 95       	dec	r27
    15ec:	c9 f7       	brne	.-14     	; 0x15e0 <__fixunssfsi+0x14>
    15ee:	14 c0       	rjmp	.+40     	; 0x1618 <__fixunssfsi+0x4c>
    15f0:	b1 30       	cpi	r27, 0x01	; 1
    15f2:	91 f0       	breq	.+36     	; 0x1618 <__fixunssfsi+0x4c>
    15f4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__fp_zero>
    15f8:	b1 e0       	ldi	r27, 0x01	; 1
    15fa:	08 95       	ret
    15fc:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <__fp_zero>
    1600:	67 2f       	mov	r22, r23
    1602:	78 2f       	mov	r23, r24
    1604:	88 27       	eor	r24, r24
    1606:	b8 5f       	subi	r27, 0xF8	; 248
    1608:	39 f0       	breq	.+14     	; 0x1618 <__fixunssfsi+0x4c>
    160a:	b9 3f       	cpi	r27, 0xF9	; 249
    160c:	cc f3       	brlt	.-14     	; 0x1600 <__fixunssfsi+0x34>
    160e:	86 95       	lsr	r24
    1610:	77 95       	ror	r23
    1612:	67 95       	ror	r22
    1614:	b3 95       	inc	r27
    1616:	d9 f7       	brne	.-10     	; 0x160e <__fixunssfsi+0x42>
    1618:	3e f4       	brtc	.+14     	; 0x1628 <__fixunssfsi+0x5c>
    161a:	90 95       	com	r25
    161c:	80 95       	com	r24
    161e:	70 95       	com	r23
    1620:	61 95       	neg	r22
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	08 95       	ret

0000162a <__floatunsisf>:
    162a:	e8 94       	clt
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <__floatsisf+0x12>

0000162e <__floatsisf>:
    162e:	97 fb       	bst	r25, 7
    1630:	3e f4       	brtc	.+14     	; 0x1640 <__floatsisf+0x12>
    1632:	90 95       	com	r25
    1634:	80 95       	com	r24
    1636:	70 95       	com	r23
    1638:	61 95       	neg	r22
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	8f 4f       	sbci	r24, 0xFF	; 255
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	99 23       	and	r25, r25
    1642:	a9 f0       	breq	.+42     	; 0x166e <__floatsisf+0x40>
    1644:	f9 2f       	mov	r31, r25
    1646:	96 e9       	ldi	r25, 0x96	; 150
    1648:	bb 27       	eor	r27, r27
    164a:	93 95       	inc	r25
    164c:	f6 95       	lsr	r31
    164e:	87 95       	ror	r24
    1650:	77 95       	ror	r23
    1652:	67 95       	ror	r22
    1654:	b7 95       	ror	r27
    1656:	f1 11       	cpse	r31, r1
    1658:	f8 cf       	rjmp	.-16     	; 0x164a <__floatsisf+0x1c>
    165a:	fa f4       	brpl	.+62     	; 0x169a <__floatsisf+0x6c>
    165c:	bb 0f       	add	r27, r27
    165e:	11 f4       	brne	.+4      	; 0x1664 <__floatsisf+0x36>
    1660:	60 ff       	sbrs	r22, 0
    1662:	1b c0       	rjmp	.+54     	; 0x169a <__floatsisf+0x6c>
    1664:	6f 5f       	subi	r22, 0xFF	; 255
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	8f 4f       	sbci	r24, 0xFF	; 255
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	16 c0       	rjmp	.+44     	; 0x169a <__floatsisf+0x6c>
    166e:	88 23       	and	r24, r24
    1670:	11 f0       	breq	.+4      	; 0x1676 <__floatsisf+0x48>
    1672:	96 e9       	ldi	r25, 0x96	; 150
    1674:	11 c0       	rjmp	.+34     	; 0x1698 <__floatsisf+0x6a>
    1676:	77 23       	and	r23, r23
    1678:	21 f0       	breq	.+8      	; 0x1682 <__floatsisf+0x54>
    167a:	9e e8       	ldi	r25, 0x8E	; 142
    167c:	87 2f       	mov	r24, r23
    167e:	76 2f       	mov	r23, r22
    1680:	05 c0       	rjmp	.+10     	; 0x168c <__floatsisf+0x5e>
    1682:	66 23       	and	r22, r22
    1684:	71 f0       	breq	.+28     	; 0x16a2 <__floatsisf+0x74>
    1686:	96 e8       	ldi	r25, 0x86	; 134
    1688:	86 2f       	mov	r24, r22
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	2a f0       	brmi	.+10     	; 0x169a <__floatsisf+0x6c>
    1690:	9a 95       	dec	r25
    1692:	66 0f       	add	r22, r22
    1694:	77 1f       	adc	r23, r23
    1696:	88 1f       	adc	r24, r24
    1698:	da f7       	brpl	.-10     	; 0x1690 <__floatsisf+0x62>
    169a:	88 0f       	add	r24, r24
    169c:	96 95       	lsr	r25
    169e:	87 95       	ror	r24
    16a0:	97 f9       	bld	r25, 7
    16a2:	08 95       	ret

000016a4 <__fp_inf>:
    16a4:	97 f9       	bld	r25, 7
    16a6:	9f 67       	ori	r25, 0x7F	; 127
    16a8:	80 e8       	ldi	r24, 0x80	; 128
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	08 95       	ret

000016b0 <__fp_nan>:
    16b0:	9f ef       	ldi	r25, 0xFF	; 255
    16b2:	80 ec       	ldi	r24, 0xC0	; 192
    16b4:	08 95       	ret

000016b6 <__fp_pscA>:
    16b6:	00 24       	eor	r0, r0
    16b8:	0a 94       	dec	r0
    16ba:	16 16       	cp	r1, r22
    16bc:	17 06       	cpc	r1, r23
    16be:	18 06       	cpc	r1, r24
    16c0:	09 06       	cpc	r0, r25
    16c2:	08 95       	ret

000016c4 <__fp_pscB>:
    16c4:	00 24       	eor	r0, r0
    16c6:	0a 94       	dec	r0
    16c8:	12 16       	cp	r1, r18
    16ca:	13 06       	cpc	r1, r19
    16cc:	14 06       	cpc	r1, r20
    16ce:	05 06       	cpc	r0, r21
    16d0:	08 95       	ret

000016d2 <__fp_round>:
    16d2:	09 2e       	mov	r0, r25
    16d4:	03 94       	inc	r0
    16d6:	00 0c       	add	r0, r0
    16d8:	11 f4       	brne	.+4      	; 0x16de <__fp_round+0xc>
    16da:	88 23       	and	r24, r24
    16dc:	52 f0       	brmi	.+20     	; 0x16f2 <__fp_round+0x20>
    16de:	bb 0f       	add	r27, r27
    16e0:	40 f4       	brcc	.+16     	; 0x16f2 <__fp_round+0x20>
    16e2:	bf 2b       	or	r27, r31
    16e4:	11 f4       	brne	.+4      	; 0x16ea <__fp_round+0x18>
    16e6:	60 ff       	sbrs	r22, 0
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <__fp_round+0x20>
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	8f 4f       	sbci	r24, 0xFF	; 255
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	08 95       	ret

000016f4 <__fp_split3>:
    16f4:	57 fd       	sbrc	r21, 7
    16f6:	90 58       	subi	r25, 0x80	; 128
    16f8:	44 0f       	add	r20, r20
    16fa:	55 1f       	adc	r21, r21
    16fc:	59 f0       	breq	.+22     	; 0x1714 <__fp_splitA+0x10>
    16fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1700:	71 f0       	breq	.+28     	; 0x171e <__fp_splitA+0x1a>
    1702:	47 95       	ror	r20

00001704 <__fp_splitA>:
    1704:	88 0f       	add	r24, r24
    1706:	97 fb       	bst	r25, 7
    1708:	99 1f       	adc	r25, r25
    170a:	61 f0       	breq	.+24     	; 0x1724 <__fp_splitA+0x20>
    170c:	9f 3f       	cpi	r25, 0xFF	; 255
    170e:	79 f0       	breq	.+30     	; 0x172e <__fp_splitA+0x2a>
    1710:	87 95       	ror	r24
    1712:	08 95       	ret
    1714:	12 16       	cp	r1, r18
    1716:	13 06       	cpc	r1, r19
    1718:	14 06       	cpc	r1, r20
    171a:	55 1f       	adc	r21, r21
    171c:	f2 cf       	rjmp	.-28     	; 0x1702 <__fp_split3+0xe>
    171e:	46 95       	lsr	r20
    1720:	f1 df       	rcall	.-30     	; 0x1704 <__fp_splitA>
    1722:	08 c0       	rjmp	.+16     	; 0x1734 <__fp_splitA+0x30>
    1724:	16 16       	cp	r1, r22
    1726:	17 06       	cpc	r1, r23
    1728:	18 06       	cpc	r1, r24
    172a:	99 1f       	adc	r25, r25
    172c:	f1 cf       	rjmp	.-30     	; 0x1710 <__fp_splitA+0xc>
    172e:	86 95       	lsr	r24
    1730:	71 05       	cpc	r23, r1
    1732:	61 05       	cpc	r22, r1
    1734:	08 94       	sec
    1736:	08 95       	ret

00001738 <__fp_zero>:
    1738:	e8 94       	clt

0000173a <__fp_szero>:
    173a:	bb 27       	eor	r27, r27
    173c:	66 27       	eor	r22, r22
    173e:	77 27       	eor	r23, r23
    1740:	cb 01       	movw	r24, r22
    1742:	97 f9       	bld	r25, 7
    1744:	08 95       	ret

00001746 <__mulsf3>:
    1746:	0e 94 b6 0b 	call	0x176c	; 0x176c <__mulsf3x>
    174a:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_round>
    174e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__fp_pscA>
    1752:	38 f0       	brcs	.+14     	; 0x1762 <__mulsf3+0x1c>
    1754:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__fp_pscB>
    1758:	20 f0       	brcs	.+8      	; 0x1762 <__mulsf3+0x1c>
    175a:	95 23       	and	r25, r21
    175c:	11 f0       	breq	.+4      	; 0x1762 <__mulsf3+0x1c>
    175e:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_inf>
    1762:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__fp_nan>
    1766:	11 24       	eor	r1, r1
    1768:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_szero>

0000176c <__mulsf3x>:
    176c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__fp_split3>
    1770:	70 f3       	brcs	.-36     	; 0x174e <__mulsf3+0x8>

00001772 <__mulsf3_pse>:
    1772:	95 9f       	mul	r25, r21
    1774:	c1 f3       	breq	.-16     	; 0x1766 <__mulsf3+0x20>
    1776:	95 0f       	add	r25, r21
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	55 1f       	adc	r21, r21
    177c:	62 9f       	mul	r22, r18
    177e:	f0 01       	movw	r30, r0
    1780:	72 9f       	mul	r23, r18
    1782:	bb 27       	eor	r27, r27
    1784:	f0 0d       	add	r31, r0
    1786:	b1 1d       	adc	r27, r1
    1788:	63 9f       	mul	r22, r19
    178a:	aa 27       	eor	r26, r26
    178c:	f0 0d       	add	r31, r0
    178e:	b1 1d       	adc	r27, r1
    1790:	aa 1f       	adc	r26, r26
    1792:	64 9f       	mul	r22, r20
    1794:	66 27       	eor	r22, r22
    1796:	b0 0d       	add	r27, r0
    1798:	a1 1d       	adc	r26, r1
    179a:	66 1f       	adc	r22, r22
    179c:	82 9f       	mul	r24, r18
    179e:	22 27       	eor	r18, r18
    17a0:	b0 0d       	add	r27, r0
    17a2:	a1 1d       	adc	r26, r1
    17a4:	62 1f       	adc	r22, r18
    17a6:	73 9f       	mul	r23, r19
    17a8:	b0 0d       	add	r27, r0
    17aa:	a1 1d       	adc	r26, r1
    17ac:	62 1f       	adc	r22, r18
    17ae:	83 9f       	mul	r24, r19
    17b0:	a0 0d       	add	r26, r0
    17b2:	61 1d       	adc	r22, r1
    17b4:	22 1f       	adc	r18, r18
    17b6:	74 9f       	mul	r23, r20
    17b8:	33 27       	eor	r19, r19
    17ba:	a0 0d       	add	r26, r0
    17bc:	61 1d       	adc	r22, r1
    17be:	23 1f       	adc	r18, r19
    17c0:	84 9f       	mul	r24, r20
    17c2:	60 0d       	add	r22, r0
    17c4:	21 1d       	adc	r18, r1
    17c6:	82 2f       	mov	r24, r18
    17c8:	76 2f       	mov	r23, r22
    17ca:	6a 2f       	mov	r22, r26
    17cc:	11 24       	eor	r1, r1
    17ce:	9f 57       	subi	r25, 0x7F	; 127
    17d0:	50 40       	sbci	r21, 0x00	; 0
    17d2:	9a f0       	brmi	.+38     	; 0x17fa <__mulsf3_pse+0x88>
    17d4:	f1 f0       	breq	.+60     	; 0x1812 <__mulsf3_pse+0xa0>
    17d6:	88 23       	and	r24, r24
    17d8:	4a f0       	brmi	.+18     	; 0x17ec <__mulsf3_pse+0x7a>
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	bb 1f       	adc	r27, r27
    17e0:	66 1f       	adc	r22, r22
    17e2:	77 1f       	adc	r23, r23
    17e4:	88 1f       	adc	r24, r24
    17e6:	91 50       	subi	r25, 0x01	; 1
    17e8:	50 40       	sbci	r21, 0x00	; 0
    17ea:	a9 f7       	brne	.-22     	; 0x17d6 <__mulsf3_pse+0x64>
    17ec:	9e 3f       	cpi	r25, 0xFE	; 254
    17ee:	51 05       	cpc	r21, r1
    17f0:	80 f0       	brcs	.+32     	; 0x1812 <__mulsf3_pse+0xa0>
    17f2:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_inf>
    17f6:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_szero>
    17fa:	5f 3f       	cpi	r21, 0xFF	; 255
    17fc:	e4 f3       	brlt	.-8      	; 0x17f6 <__mulsf3_pse+0x84>
    17fe:	98 3e       	cpi	r25, 0xE8	; 232
    1800:	d4 f3       	brlt	.-12     	; 0x17f6 <__mulsf3_pse+0x84>
    1802:	86 95       	lsr	r24
    1804:	77 95       	ror	r23
    1806:	67 95       	ror	r22
    1808:	b7 95       	ror	r27
    180a:	f7 95       	ror	r31
    180c:	e7 95       	ror	r30
    180e:	9f 5f       	subi	r25, 0xFF	; 255
    1810:	c1 f7       	brne	.-16     	; 0x1802 <__mulsf3_pse+0x90>
    1812:	fe 2b       	or	r31, r30
    1814:	88 0f       	add	r24, r24
    1816:	91 1d       	adc	r25, r1
    1818:	96 95       	lsr	r25
    181a:	87 95       	ror	r24
    181c:	97 f9       	bld	r25, 7
    181e:	08 95       	ret

00001820 <__mulsi3>:
    1820:	db 01       	movw	r26, r22
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	0e 94 45 0c 	call	0x188a	; 0x188a <__muluhisi3>
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	a2 9f       	mul	r26, r18
    1830:	80 0d       	add	r24, r0
    1832:	91 1d       	adc	r25, r1
    1834:	a3 9f       	mul	r26, r19
    1836:	90 0d       	add	r25, r0
    1838:	b2 9f       	mul	r27, r18
    183a:	90 0d       	add	r25, r0
    183c:	11 24       	eor	r1, r1
    183e:	08 95       	ret

00001840 <__divmodsi4>:
    1840:	05 2e       	mov	r0, r21
    1842:	97 fb       	bst	r25, 7
    1844:	1e f4       	brtc	.+6      	; 0x184c <__divmodsi4+0xc>
    1846:	00 94       	com	r0
    1848:	0e 94 37 0c 	call	0x186e	; 0x186e <__negsi2>
    184c:	57 fd       	sbrc	r21, 7
    184e:	07 d0       	rcall	.+14     	; 0x185e <__divmodsi4_neg2>
    1850:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__udivmodsi4>
    1854:	07 fc       	sbrc	r0, 7
    1856:	03 d0       	rcall	.+6      	; 0x185e <__divmodsi4_neg2>
    1858:	4e f4       	brtc	.+18     	; 0x186c <__divmodsi4_exit>
    185a:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__negsi2>

0000185e <__divmodsi4_neg2>:
    185e:	50 95       	com	r21
    1860:	40 95       	com	r20
    1862:	30 95       	com	r19
    1864:	21 95       	neg	r18
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	4f 4f       	sbci	r20, 0xFF	; 255
    186a:	5f 4f       	sbci	r21, 0xFF	; 255

0000186c <__divmodsi4_exit>:
    186c:	08 95       	ret

0000186e <__negsi2>:
    186e:	90 95       	com	r25
    1870:	80 95       	com	r24
    1872:	70 95       	com	r23
    1874:	61 95       	neg	r22
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	8f 4f       	sbci	r24, 0xFF	; 255
    187a:	9f 4f       	sbci	r25, 0xFF	; 255
    187c:	08 95       	ret

0000187e <__tablejump2__>:
    187e:	ee 0f       	add	r30, r30
    1880:	ff 1f       	adc	r31, r31
    1882:	05 90       	lpm	r0, Z+
    1884:	f4 91       	lpm	r31, Z
    1886:	e0 2d       	mov	r30, r0
    1888:	09 94       	ijmp

0000188a <__muluhisi3>:
    188a:	0e 94 90 0c 	call	0x1920	; 0x1920 <__umulhisi3>
    188e:	a5 9f       	mul	r26, r21
    1890:	90 0d       	add	r25, r0
    1892:	b4 9f       	mul	r27, r20
    1894:	90 0d       	add	r25, r0
    1896:	a4 9f       	mul	r26, r20
    1898:	80 0d       	add	r24, r0
    189a:	91 1d       	adc	r25, r1
    189c:	11 24       	eor	r1, r1
    189e:	08 95       	ret

000018a0 <__ashrdi3>:
    18a0:	97 fb       	bst	r25, 7
    18a2:	10 f8       	bld	r1, 0

000018a4 <__lshrdi3>:
    18a4:	16 94       	lsr	r1
    18a6:	00 08       	sbc	r0, r0
    18a8:	0f 93       	push	r16
    18aa:	08 30       	cpi	r16, 0x08	; 8
    18ac:	98 f0       	brcs	.+38     	; 0x18d4 <__lshrdi3+0x30>
    18ae:	08 50       	subi	r16, 0x08	; 8
    18b0:	23 2f       	mov	r18, r19
    18b2:	34 2f       	mov	r19, r20
    18b4:	45 2f       	mov	r20, r21
    18b6:	56 2f       	mov	r21, r22
    18b8:	67 2f       	mov	r22, r23
    18ba:	78 2f       	mov	r23, r24
    18bc:	89 2f       	mov	r24, r25
    18be:	90 2d       	mov	r25, r0
    18c0:	f4 cf       	rjmp	.-24     	; 0x18aa <__lshrdi3+0x6>
    18c2:	05 94       	asr	r0
    18c4:	97 95       	ror	r25
    18c6:	87 95       	ror	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	57 95       	ror	r21
    18ce:	47 95       	ror	r20
    18d0:	37 95       	ror	r19
    18d2:	27 95       	ror	r18
    18d4:	0a 95       	dec	r16
    18d6:	aa f7       	brpl	.-22     	; 0x18c2 <__lshrdi3+0x1e>
    18d8:	0f 91       	pop	r16
    18da:	08 95       	ret

000018dc <__udivmodsi4>:
    18dc:	a1 e2       	ldi	r26, 0x21	; 33
    18de:	1a 2e       	mov	r1, r26
    18e0:	aa 1b       	sub	r26, r26
    18e2:	bb 1b       	sub	r27, r27
    18e4:	fd 01       	movw	r30, r26
    18e6:	0d c0       	rjmp	.+26     	; 0x1902 <__udivmodsi4_ep>

000018e8 <__udivmodsi4_loop>:
    18e8:	aa 1f       	adc	r26, r26
    18ea:	bb 1f       	adc	r27, r27
    18ec:	ee 1f       	adc	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	a2 17       	cp	r26, r18
    18f2:	b3 07       	cpc	r27, r19
    18f4:	e4 07       	cpc	r30, r20
    18f6:	f5 07       	cpc	r31, r21
    18f8:	20 f0       	brcs	.+8      	; 0x1902 <__udivmodsi4_ep>
    18fa:	a2 1b       	sub	r26, r18
    18fc:	b3 0b       	sbc	r27, r19
    18fe:	e4 0b       	sbc	r30, r20
    1900:	f5 0b       	sbc	r31, r21

00001902 <__udivmodsi4_ep>:
    1902:	66 1f       	adc	r22, r22
    1904:	77 1f       	adc	r23, r23
    1906:	88 1f       	adc	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	1a 94       	dec	r1
    190c:	69 f7       	brne	.-38     	; 0x18e8 <__udivmodsi4_loop>
    190e:	60 95       	com	r22
    1910:	70 95       	com	r23
    1912:	80 95       	com	r24
    1914:	90 95       	com	r25
    1916:	9b 01       	movw	r18, r22
    1918:	ac 01       	movw	r20, r24
    191a:	bd 01       	movw	r22, r26
    191c:	cf 01       	movw	r24, r30
    191e:	08 95       	ret

00001920 <__umulhisi3>:
    1920:	a2 9f       	mul	r26, r18
    1922:	b0 01       	movw	r22, r0
    1924:	b3 9f       	mul	r27, r19
    1926:	c0 01       	movw	r24, r0
    1928:	a3 9f       	mul	r26, r19
    192a:	70 0d       	add	r23, r0
    192c:	81 1d       	adc	r24, r1
    192e:	11 24       	eor	r1, r1
    1930:	91 1d       	adc	r25, r1
    1932:	b2 9f       	mul	r27, r18
    1934:	70 0d       	add	r23, r0
    1936:	81 1d       	adc	r24, r1
    1938:	11 24       	eor	r1, r1
    193a:	91 1d       	adc	r25, r1
    193c:	08 95       	ret

0000193e <_exit>:
    193e:	f8 94       	cli

00001940 <__stop_program>:
    1940:	ff cf       	rjmp	.-2      	; 0x1940 <__stop_program>
